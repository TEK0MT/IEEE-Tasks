
ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000474  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  00000520  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ab  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c9  00000000  00000000  00002002  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068f  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c4  00000000  00000000  000031b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_1>
   8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_2>
   c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 00 	call	0xba	; 0xba <main>
  8a:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <isr>:
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	80 e6       	ldi	r24, 0x60	; 96
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 aa 00 	call	0x154	; 0x154 <gpio_pin_write_logic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e9       	ldi	r18, 0x9F	; 159
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <isr+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <isr+0x1a>
  ac:	00 00       	nop
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 aa 00 	call	0x154	; 0x154 <gpio_pin_write_logic>
  b8:	08 95       	ret

000000ba <main>:
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 ee 00 	call	0x1dc	; 0x1dc <gpio_pin_initialize>
  c2:	84 e6       	ldi	r24, 0x64	; 100
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 65 01 	call	0x2ca	; 0x2ca <Intx_Init>
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x10>

000000cc <gpio_pin_direction_initialize>:
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	d1 f1       	breq	.+116    	; 0x144 <gpio_pin_direction_initialize+0x78>
  d0:	dc 01       	movw	r26, r24
  d2:	ec 91       	ld	r30, X
  d4:	e6 30       	cpi	r30, 0x06	; 6
  d6:	c0 f5       	brcc	.+112    	; 0x148 <gpio_pin_direction_initialize+0x7c>
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	8c 91       	ld	r24, X
  dc:	89 30       	cpi	r24, 0x09	; 9
  de:	b0 f5       	brcc	.+108    	; 0x14c <gpio_pin_direction_initialize+0x80>
  e0:	66 23       	and	r22, r22
  e2:	19 f0       	breq	.+6      	; 0xea <gpio_pin_direction_initialize+0x1e>
  e4:	61 30       	cpi	r22, 0x01	; 1
  e6:	c1 f0       	breq	.+48     	; 0x118 <gpio_pin_direction_initialize+0x4c>
  e8:	33 c0       	rjmp	.+102    	; 0x150 <gpio_pin_direction_initialize+0x84>
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	e8 59       	subi	r30, 0x98	; 152
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	01 90       	ld	r0, Z+
  f6:	f0 81       	ld	r31, Z
  f8:	e0 2d       	mov	r30, r0
  fa:	40 81       	ld	r20, Z
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	b9 01       	movw	r22, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <gpio_pin_direction_initialize+0x3c>
 104:	66 0f       	add	r22, r22
 106:	77 1f       	adc	r23, r23
 108:	8a 95       	dec	r24
 10a:	e2 f7       	brpl	.-8      	; 0x104 <gpio_pin_direction_initialize+0x38>
 10c:	cb 01       	movw	r24, r22
 10e:	80 95       	com	r24
 110:	84 23       	and	r24, r20
 112:	80 83       	st	Z, r24
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	e8 59       	subi	r30, 0x98	; 152
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	01 90       	ld	r0, Z+
 124:	f0 81       	ld	r31, Z
 126:	e0 2d       	mov	r30, r0
 128:	40 81       	ld	r20, Z
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	d9 01       	movw	r26, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <gpio_pin_direction_initialize+0x6a>
 132:	aa 0f       	add	r26, r26
 134:	bb 1f       	adc	r27, r27
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <gpio_pin_direction_initialize+0x66>
 13a:	cd 01       	movw	r24, r26
 13c:	84 2b       	or	r24, r20
 13e:	80 83       	st	Z, r24
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret

00000154 <gpio_pin_write_logic>:
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	d1 f1       	breq	.+116    	; 0x1cc <gpio_pin_write_logic+0x78>
 158:	dc 01       	movw	r26, r24
 15a:	ec 91       	ld	r30, X
 15c:	e6 30       	cpi	r30, 0x06	; 6
 15e:	c0 f5       	brcc	.+112    	; 0x1d0 <gpio_pin_write_logic+0x7c>
 160:	11 96       	adiw	r26, 0x01	; 1
 162:	8c 91       	ld	r24, X
 164:	89 30       	cpi	r24, 0x09	; 9
 166:	b0 f5       	brcc	.+108    	; 0x1d4 <gpio_pin_write_logic+0x80>
 168:	66 23       	and	r22, r22
 16a:	19 f0       	breq	.+6      	; 0x172 <gpio_pin_write_logic+0x1e>
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	c1 f0       	breq	.+48     	; 0x1a0 <gpio_pin_write_logic+0x4c>
 170:	33 c0       	rjmp	.+102    	; 0x1d8 <gpio_pin_write_logic+0x84>
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	e0 59       	subi	r30, 0x90	; 144
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	01 90       	ld	r0, Z+
 17e:	f0 81       	ld	r31, Z
 180:	e0 2d       	mov	r30, r0
 182:	40 81       	ld	r20, Z
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	b9 01       	movw	r22, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <gpio_pin_write_logic+0x3c>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <gpio_pin_write_logic+0x38>
 194:	cb 01       	movw	r24, r22
 196:	80 95       	com	r24
 198:	84 23       	and	r24, r20
 19a:	80 83       	st	Z, r24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	08 95       	ret
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	e0 59       	subi	r30, 0x90	; 144
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	01 90       	ld	r0, Z+
 1ac:	f0 81       	ld	r31, Z
 1ae:	e0 2d       	mov	r30, r0
 1b0:	40 81       	ld	r20, Z
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	d9 01       	movw	r26, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <gpio_pin_write_logic+0x6a>
 1ba:	aa 0f       	add	r26, r26
 1bc:	bb 1f       	adc	r27, r27
 1be:	8a 95       	dec	r24
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <gpio_pin_write_logic+0x66>
 1c2:	cd 01       	movw	r24, r26
 1c4:	84 2b       	or	r24, r20
 1c6:	80 83       	st	Z, r24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret

000001dc <gpio_pin_initialize>:
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	89 f0       	breq	.+34     	; 0x206 <gpio_pin_initialize+0x2a>
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 81       	ld	r18, Z
 1e8:	26 30       	cpi	r18, 0x06	; 6
 1ea:	78 f4       	brcc	.+30     	; 0x20a <gpio_pin_initialize+0x2e>
 1ec:	21 81       	ldd	r18, Z+1	; 0x01
 1ee:	29 30       	cpi	r18, 0x09	; 9
 1f0:	70 f4       	brcc	.+28     	; 0x20e <gpio_pin_initialize+0x32>
 1f2:	ec 01       	movw	r28, r24
 1f4:	62 81       	ldd	r22, Z+2	; 0x02
 1f6:	0e 94 66 00 	call	0xcc	; 0xcc <gpio_pin_direction_initialize>
 1fa:	6b 81       	ldd	r22, Y+3	; 0x03
 1fc:	ce 01       	movw	r24, r28
 1fe:	0e 94 aa 00 	call	0x154	; 0x154 <gpio_pin_write_logic>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	05 c0       	rjmp	.+10     	; 0x210 <gpio_pin_initialize+0x34>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	03 c0       	rjmp	.+6      	; 0x210 <gpio_pin_initialize+0x34>
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	01 c0       	rjmp	.+2      	; 0x210 <gpio_pin_initialize+0x34>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <mode_select_int0>:
			CLEAR_BIT(GICR,5);
			
		}
	}
	return ret;
}
 216:	fc 01       	movw	r30, r24
 218:	83 81       	ldd	r24, Z+3	; 0x03
 21a:	81 11       	cpse	r24, r1
 21c:	07 c0       	rjmp	.+14     	; 0x22c <mode_select_int0+0x16>
 21e:	85 b7       	in	r24, 0x35	; 53
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	85 bf       	out	0x35, r24	; 53
 224:	85 b7       	in	r24, 0x35	; 53
 226:	8d 7f       	andi	r24, 0xFD	; 253
 228:	85 bf       	out	0x35, r24	; 53
 22a:	08 95       	ret
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	39 f4       	brne	.+14     	; 0x23e <mode_select_int0+0x28>
 230:	85 b7       	in	r24, 0x35	; 53
 232:	81 60       	ori	r24, 0x01	; 1
 234:	85 bf       	out	0x35, r24	; 53
 236:	85 b7       	in	r24, 0x35	; 53
 238:	8d 7f       	andi	r24, 0xFD	; 253
 23a:	85 bf       	out	0x35, r24	; 53
 23c:	08 95       	ret
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	39 f4       	brne	.+14     	; 0x250 <mode_select_int0+0x3a>
 242:	85 b7       	in	r24, 0x35	; 53
 244:	82 60       	ori	r24, 0x02	; 2
 246:	85 bf       	out	0x35, r24	; 53
 248:	85 b7       	in	r24, 0x35	; 53
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	85 bf       	out	0x35, r24	; 53
 24e:	08 95       	ret
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	31 f4       	brne	.+12     	; 0x260 <mode_select_int0+0x4a>
 254:	85 b7       	in	r24, 0x35	; 53
 256:	82 60       	ori	r24, 0x02	; 2
 258:	85 bf       	out	0x35, r24	; 53
 25a:	85 b7       	in	r24, 0x35	; 53
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	85 bf       	out	0x35, r24	; 53
 260:	08 95       	ret

00000262 <mode_select_int1>:
 262:	fc 01       	movw	r30, r24
 264:	83 81       	ldd	r24, Z+3	; 0x03
 266:	81 11       	cpse	r24, r1
 268:	07 c0       	rjmp	.+14     	; 0x278 <mode_select_int1+0x16>
 26a:	85 b7       	in	r24, 0x35	; 53
 26c:	8b 7f       	andi	r24, 0xFB	; 251
 26e:	85 bf       	out	0x35, r24	; 53
 270:	85 b7       	in	r24, 0x35	; 53
 272:	87 7f       	andi	r24, 0xF7	; 247
 274:	85 bf       	out	0x35, r24	; 53
 276:	08 95       	ret
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	39 f4       	brne	.+14     	; 0x28a <mode_select_int1+0x28>
 27c:	85 b7       	in	r24, 0x35	; 53
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	85 bf       	out	0x35, r24	; 53
 282:	85 b7       	in	r24, 0x35	; 53
 284:	87 7f       	andi	r24, 0xF7	; 247
 286:	85 bf       	out	0x35, r24	; 53
 288:	08 95       	ret
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	39 f4       	brne	.+14     	; 0x29c <mode_select_int1+0x3a>
 28e:	85 b7       	in	r24, 0x35	; 53
 290:	88 60       	ori	r24, 0x08	; 8
 292:	85 bf       	out	0x35, r24	; 53
 294:	85 b7       	in	r24, 0x35	; 53
 296:	8b 7f       	andi	r24, 0xFB	; 251
 298:	85 bf       	out	0x35, r24	; 53
 29a:	08 95       	ret
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	31 f4       	brne	.+12     	; 0x2ac <mode_select_int1+0x4a>
 2a0:	85 b7       	in	r24, 0x35	; 53
 2a2:	84 60       	ori	r24, 0x04	; 4
 2a4:	85 bf       	out	0x35, r24	; 53
 2a6:	85 b7       	in	r24, 0x35	; 53
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	85 bf       	out	0x35, r24	; 53
 2ac:	08 95       	ret

000002ae <mode_select_int2>:
 2ae:	fc 01       	movw	r30, r24
 2b0:	83 81       	ldd	r24, Z+3	; 0x03
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	21 f4       	brne	.+8      	; 0x2be <mode_select_int2+0x10>
 2b6:	84 b7       	in	r24, 0x34	; 52
 2b8:	8f 7b       	andi	r24, 0xBF	; 191
 2ba:	84 bf       	out	0x34, r24	; 52
 2bc:	08 95       	ret
 2be:	83 30       	cpi	r24, 0x03	; 3
 2c0:	19 f4       	brne	.+6      	; 0x2c8 <mode_select_int2+0x1a>
 2c2:	84 b7       	in	r24, 0x34	; 52
 2c4:	80 64       	ori	r24, 0x40	; 64
 2c6:	84 bf       	out	0x34, r24	; 52
 2c8:	08 95       	ret

000002ca <Intx_Init>:
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	00 97       	sbiw	r24, 0x00	; 0
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <Intx_Init+0xa>
 2d2:	44 c0       	rjmp	.+136    	; 0x35c <Intx_Init+0x92>
 2d4:	ec 01       	movw	r28, r24
 2d6:	9f b7       	in	r25, 0x3f	; 63
 2d8:	90 68       	ori	r25, 0x80	; 128
 2da:	9f bf       	out	0x3f, r25	; 63
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	91 11       	cpse	r25, r1
 2e0:	14 c0       	rjmp	.+40     	; 0x30a <Intx_Init+0x40>
 2e2:	8b b7       	in	r24, 0x3b	; 59
 2e4:	80 64       	ori	r24, 0x40	; 64
 2e6:	8b bf       	out	0x3b, r24	; 59
 2e8:	8a b7       	in	r24, 0x3a	; 58
 2ea:	80 64       	ori	r24, 0x40	; 64
 2ec:	8a bf       	out	0x3a, r24	; 58
 2ee:	81 b3       	in	r24, 0x11	; 17
 2f0:	8b 7f       	andi	r24, 0xFB	; 251
 2f2:	81 bb       	out	0x11, r24	; 17
 2f4:	88 81       	ld	r24, Y
 2f6:	99 81       	ldd	r25, Y+1	; 0x01
 2f8:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <INT0_HANDLER+0x1>
 2fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <INT0_HANDLER>
 300:	ce 01       	movw	r24, r28
 302:	0e 94 0b 01 	call	0x216	; 0x216 <mode_select_int0>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	2c c0       	rjmp	.+88     	; 0x362 <Intx_Init+0x98>
 30a:	91 30       	cpi	r25, 0x01	; 1
 30c:	a1 f4       	brne	.+40     	; 0x336 <Intx_Init+0x6c>
 30e:	8b b7       	in	r24, 0x3b	; 59
 310:	80 68       	ori	r24, 0x80	; 128
 312:	8b bf       	out	0x3b, r24	; 59
 314:	8a b7       	in	r24, 0x3a	; 58
 316:	80 68       	ori	r24, 0x80	; 128
 318:	8a bf       	out	0x3a, r24	; 58
 31a:	81 b3       	in	r24, 0x11	; 17
 31c:	87 7f       	andi	r24, 0xF7	; 247
 31e:	81 bb       	out	0x11, r24	; 17
 320:	88 81       	ld	r24, Y
 322:	99 81       	ldd	r25, Y+1	; 0x01
 324:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <INT1_HANDLER+0x1>
 328:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <INT1_HANDLER>
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 31 01 	call	0x262	; 0x262 <mode_select_int1>
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	16 c0       	rjmp	.+44     	; 0x362 <Intx_Init+0x98>
 336:	95 30       	cpi	r25, 0x05	; 5
 338:	99 f4       	brne	.+38     	; 0x360 <Intx_Init+0x96>
 33a:	8b b7       	in	r24, 0x3b	; 59
 33c:	80 62       	ori	r24, 0x20	; 32
 33e:	8b bf       	out	0x3b, r24	; 59
 340:	8a b7       	in	r24, 0x3a	; 58
 342:	80 62       	ori	r24, 0x20	; 32
 344:	8a bf       	out	0x3a, r24	; 58
 346:	ce 01       	movw	r24, r28
 348:	0e 94 57 01 	call	0x2ae	; 0x2ae <mode_select_int2>
 34c:	88 81       	ld	r24, Y
 34e:	99 81       	ldd	r25, Y+1	; 0x01
 350:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 354:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	03 c0       	rjmp	.+6      	; 0x362 <Intx_Init+0x98>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	01 c0       	rjmp	.+2      	; 0x362 <Intx_Init+0x98>
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <__vector_1>:
	else{}
}


void __vector_1(void) __attribute__((signal));
void __vector_1(void){
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
	if(INT0_HANDLER != NULL){
 38a:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <INT0_HANDLER>
 38e:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <INT0_HANDLER+0x1>
 392:	30 97       	sbiw	r30, 0x00	; 0
 394:	09 f0       	breq	.+2      	; 0x398 <__vector_1+0x30>
		INT0_HANDLER();
 396:	09 95       	icall
	}
	SET_BIT(GIFR,6);
 398:	8a b7       	in	r24, 0x3a	; 58
 39a:	80 64       	ori	r24, 0x40	; 64
 39c:	8a bf       	out	0x3a, r24	; 58
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void){
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	if(INT1_HANDLER){
 3e2:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <INT1_HANDLER>
 3e6:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <INT1_HANDLER+0x1>
 3ea:	30 97       	sbiw	r30, 0x00	; 0
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <__vector_2+0x30>
		INT1_HANDLER();
 3ee:	09 95       	icall
	}
	SET_BIT(GIFR,7);
 3f0:	8a b7       	in	r24, 0x3a	; 58
 3f2:	80 68       	ori	r24, 0x80	; 128
 3f4:	8a bf       	out	0x3a, r24	; 58
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void){
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	6f 93       	push	r22
 42c:	7f 93       	push	r23
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	af 93       	push	r26
 434:	bf 93       	push	r27
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
	if(INT2_HANDLER){
 43a:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end>
 43e:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x1>
 442:	30 97       	sbiw	r30, 0x00	; 0
 444:	09 f0       	breq	.+2      	; 0x448 <__vector_3+0x30>
		INT2_HANDLER();
 446:	09 95       	icall
	}
	SET_BIT(GIFR,5);
 448:	8a b7       	in	r24, 0x3a	; 58
 44a:	80 62       	ori	r24, 0x20	; 32
 44c:	8a bf       	out	0x3a, r24	; 58
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>


CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000444  00800060  00000f22  00000fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008004a4  008004a4  000013fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f2e  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b25  00000000  00000000  00005506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142e  00000000  00000000  0000602b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  0000745c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000874  00000000  00000000  000078a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000272e  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000a84a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b4 e0       	ldi	r27, 0x04	; 4
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 af 01 	call	0x35e	; 0x35e <main>
  8a:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Button_Init>:
 */ 
#include "ecu_button.h"
Std_ReturnType Button_Init(const button_t *btn){
	Std_ReturnType ret = E_OK;
	
	if(btn == NULL){
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	29 f0       	breq	.+10     	; 0xa0 <Button_Init+0xe>
		ret = E_NOT_OK;
	}
	else{
		gpio_pin_direction_initialize(&(btn->pin),GPIO_DIRECTION_INPUT);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	0e 94 c6 06 	call	0xd8c	; 0xd8c <gpio_pin_direction_initialize>
 * Created: 8/19/2024 11:39:09 PM
 *  Author: Mohamed Tarek
 */ 
#include "ecu_button.h"
Std_ReturnType Button_Init(const button_t *btn){
	Std_ReturnType ret = E_OK;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	08 95       	ret
	
	if(btn == NULL){
		ret = E_NOT_OK;
  a0:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		gpio_pin_direction_initialize(&(btn->pin),GPIO_DIRECTION_INPUT);
	}
	return ret;
}
  a2:	08 95       	ret

000000a4 <Button_Read_Value>:
Std_ReturnType Button_Read_Value(const button_t *btn,button_state *val){
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOT_OK;
	logic_t pin_logic = GPIO_LOW;
  b6:	19 82       	std	Y+1, r1	; 0x01
	if(btn == NULL){
  b8:	00 97       	sbiw	r24, 0x00	; 0
  ba:	09 f1       	breq	.+66     	; 0xfe <Button_Read_Value+0x5a>
  bc:	7b 01       	movw	r14, r22
  be:	8c 01       	movw	r16, r24
		ret = E_NOT_OK;
	}
	else{
		gpio_pin_read_logic(&(btn->pin),&pin_logic);
  c0:	be 01       	movw	r22, r28
  c2:	6f 5f       	subi	r22, 0xFF	; 255
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
  c6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <gpio_pin_read_logic>
		if(btn->type == ACTIVE_HIGH){
  ca:	f8 01       	movw	r30, r16
  cc:	84 81       	ldd	r24, Z+4	; 0x04
  ce:	81 11       	cpse	r24, r1
  d0:	0a c0       	rjmp	.+20     	; 0xe6 <Button_Read_Value+0x42>
			if(pin_logic == GPIO_HIGH){
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	19 f4       	brne	.+6      	; 0xde <Button_Read_Value+0x3a>
				*val = BUTTON_PRESSED;
  d8:	f7 01       	movw	r30, r14
  da:	80 83       	st	Z, r24
  dc:	13 c0       	rjmp	.+38     	; 0x104 <Button_Read_Value+0x60>
			}
			else{
				*val = BUTTON_RELEASED;
  de:	f7 01       	movw	r30, r14
  e0:	10 82       	st	Z, r1
			else{
				*val = BUTTON_PRESSED;
			}
		}
		else{/*nothing*/}
		ret = E_OK;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0f c0       	rjmp	.+30     	; 0x104 <Button_Read_Value+0x60>
			}
			else{
				*val = BUTTON_RELEASED;
			}
		}
		else if(btn->type == ACTIVE_LOW){
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	61 f4       	brne	.+24     	; 0x102 <Button_Read_Value+0x5e>
			if(pin_logic == GPIO_HIGH){
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	19 f4       	brne	.+6      	; 0xf6 <Button_Read_Value+0x52>
				*val = BUTTON_RELEASED;
  f0:	f7 01       	movw	r30, r14
  f2:	10 82       	st	Z, r1
  f4:	07 c0       	rjmp	.+14     	; 0x104 <Button_Read_Value+0x60>
			}
			else{
				*val = BUTTON_PRESSED;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	f7 01       	movw	r30, r14
  fa:	80 83       	st	Z, r24
  fc:	03 c0       	rjmp	.+6      	; 0x104 <Button_Read_Value+0x60>
}
Std_ReturnType Button_Read_Value(const button_t *btn,button_state *val){
	Std_ReturnType ret = E_NOT_OK;
	logic_t pin_logic = GPIO_LOW;
	if(btn == NULL){
		ret = E_NOT_OK;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	01 c0       	rjmp	.+2      	; 0x104 <Button_Read_Value+0x60>
			else{
				*val = BUTTON_PRESSED;
			}
		}
		else{/*nothing*/}
		ret = E_OK;
 102:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ret;
 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	08 95       	ret

00000114 <send_4bits>:
		ret = lcd_4bits_set_cursor(lcd,Row,coloumn);
		
		ret = lcd_4bit_send_char(lcd,_char);
	}
	return ret;
}
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	e9 f0       	breq	.+58     	; 0x158 <send_4bits+0x44>
 11e:	c6 2f       	mov	r28, r22
 120:	8c 01       	movw	r16, r24
 122:	61 70       	andi	r22, 0x01	; 1
 124:	08 96       	adiw	r24, 0x08	; 8
 126:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
 12a:	c1 fb       	bst	r28, 1
 12c:	66 27       	eor	r22, r22
 12e:	60 f9       	bld	r22, 0
 130:	c8 01       	movw	r24, r16
 132:	0c 96       	adiw	r24, 0x0c	; 12
 134:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
 138:	c2 fb       	bst	r28, 2
 13a:	66 27       	eor	r22, r22
 13c:	60 f9       	bld	r22, 0
 13e:	c8 01       	movw	r24, r16
 140:	40 96       	adiw	r24, 0x10	; 16
 142:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
 146:	c3 fb       	bst	r28, 3
 148:	66 27       	eor	r22, r22
 14a:	60 f9       	bld	r22, 0
 14c:	c8 01       	movw	r24, r16
 14e:	44 96       	adiw	r24, 0x14	; 20
 150:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	01 c0       	rjmp	.+2      	; 0x15a <send_4bits+0x46>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <enable_signal_4bits>:
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	79 f0       	breq	.+30     	; 0x188 <enable_signal_4bits+0x26>
 16a:	ec 01       	movw	r28, r24
 16c:	24 96       	adiw	r28, 0x04	; 4
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	ce 01       	movw	r24, r28
 172:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
 176:	00 c0       	rjmp	.+0      	; 0x178 <enable_signal_4bits+0x16>
 178:	00 c0       	rjmp	.+0      	; 0x17a <enable_signal_4bits+0x18>
 17a:	00 00       	nop
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	01 c0       	rjmp	.+2      	; 0x18a <enable_signal_4bits+0x28>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <lcd_4bit_send_command>:
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	b9 f0       	breq	.+46     	; 0x1c8 <lcd_4bit_send_command+0x38>
 19a:	16 2f       	mov	r17, r22
 19c:	ec 01       	movw	r28, r24
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
 1a4:	61 2f       	mov	r22, r17
 1a6:	62 95       	swap	r22
 1a8:	6f 70       	andi	r22, 0x0F	; 15
 1aa:	ce 01       	movw	r24, r28
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <send_4bits>
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 b1 00 	call	0x162	; 0x162 <enable_signal_4bits>
 1b6:	61 2f       	mov	r22, r17
 1b8:	ce 01       	movw	r24, r28
 1ba:	0e 94 8a 00 	call	0x114	; 0x114 <send_4bits>
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 b1 00 	call	0x162	; 0x162 <enable_signal_4bits>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <lcd_4bit_send_command+0x3a>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	08 95       	ret

000001d2 <lcd_4bit_initialize>:
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	09 f4       	brne	.+2      	; 0x1de <lcd_4bit_initialize+0xc>
 1dc:	4c c0       	rjmp	.+152    	; 0x276 <lcd_4bit_initialize+0xa4>
 1de:	ec 01       	movw	r28, r24
 1e0:	0e 94 72 07 	call	0xee4	; 0xee4 <gpio_pin_initialize>
 1e4:	ce 01       	movw	r24, r28
 1e6:	04 96       	adiw	r24, 0x04	; 4
 1e8:	0e 94 72 07 	call	0xee4	; 0xee4 <gpio_pin_initialize>
 1ec:	ce 01       	movw	r24, r28
 1ee:	08 96       	adiw	r24, 0x08	; 8
 1f0:	0e 94 72 07 	call	0xee4	; 0xee4 <gpio_pin_initialize>
 1f4:	ce 01       	movw	r24, r28
 1f6:	0c 96       	adiw	r24, 0x0c	; 12
 1f8:	0e 94 72 07 	call	0xee4	; 0xee4 <gpio_pin_initialize>
 1fc:	ce 01       	movw	r24, r28
 1fe:	40 96       	adiw	r24, 0x10	; 16
 200:	0e 94 72 07 	call	0xee4	; 0xee4 <gpio_pin_initialize>
 204:	ce 01       	movw	r24, r28
 206:	44 96       	adiw	r24, 0x14	; 20
 208:	0e 94 72 07 	call	0xee4	; 0xee4 <gpio_pin_initialize>
 20c:	18 2f       	mov	r17, r24
 20e:	87 e8       	ldi	r24, 0x87	; 135
 210:	93 e1       	ldi	r25, 0x13	; 19
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_4bit_initialize+0x40>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_4bit_initialize+0x46>
 218:	00 00       	nop
 21a:	68 e3       	ldi	r22, 0x38	; 56
 21c:	ce 01       	movw	r24, r28
 21e:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 222:	81 ee       	ldi	r24, 0xE1	; 225
 224:	94 e0       	ldi	r25, 0x04	; 4
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_4bit_initialize+0x54>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_4bit_initialize+0x5a>
 22c:	00 00       	nop
 22e:	68 e3       	ldi	r22, 0x38	; 56
 230:	ce 01       	movw	r24, r28
 232:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 236:	92 e3       	ldi	r25, 0x32	; 50
 238:	9a 95       	dec	r25
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_4bit_initialize+0x66>
 23c:	68 e3       	ldi	r22, 0x38	; 56
 23e:	ce 01       	movw	r24, r28
 240:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	ce 01       	movw	r24, r28
 248:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	ce 01       	movw	r24, r28
 250:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 254:	66 e0       	ldi	r22, 0x06	; 6
 256:	ce 01       	movw	r24, r28
 258:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 25c:	6c e0       	ldi	r22, 0x0C	; 12
 25e:	ce 01       	movw	r24, r28
 260:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 264:	68 e2       	ldi	r22, 0x28	; 40
 266:	ce 01       	movw	r24, r28
 268:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 26c:	60 e8       	ldi	r22, 0x80	; 128
 26e:	ce 01       	movw	r24, r28
 270:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 274:	01 c0       	rjmp	.+2      	; 0x278 <lcd_4bit_initialize+0xa6>
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	81 2f       	mov	r24, r17
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	08 95       	ret

00000282 <lcd_4bits_set_cursor>:
 282:	62 30       	cpi	r22, 0x02	; 2
 284:	71 f0       	breq	.+28     	; 0x2a2 <lcd_4bits_set_cursor+0x20>
 286:	18 f4       	brcc	.+6      	; 0x28e <lcd_4bits_set_cursor+0xc>
 288:	61 30       	cpi	r22, 0x01	; 1
 28a:	31 f0       	breq	.+12     	; 0x298 <lcd_4bits_set_cursor+0x16>
 28c:	18 c0       	rjmp	.+48     	; 0x2be <lcd_4bits_set_cursor+0x3c>
 28e:	63 30       	cpi	r22, 0x03	; 3
 290:	69 f0       	breq	.+26     	; 0x2ac <lcd_4bits_set_cursor+0x2a>
 292:	64 30       	cpi	r22, 0x04	; 4
 294:	81 f0       	breq	.+32     	; 0x2b6 <lcd_4bits_set_cursor+0x34>
 296:	13 c0       	rjmp	.+38     	; 0x2be <lcd_4bits_set_cursor+0x3c>
 298:	6f e7       	ldi	r22, 0x7F	; 127
 29a:	64 0f       	add	r22, r20
 29c:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 2a0:	0e c0       	rjmp	.+28     	; 0x2be <lcd_4bits_set_cursor+0x3c>
 2a2:	6f eb       	ldi	r22, 0xBF	; 191
 2a4:	64 0f       	add	r22, r20
 2a6:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 2aa:	09 c0       	rjmp	.+18     	; 0x2be <lcd_4bits_set_cursor+0x3c>
 2ac:	63 e9       	ldi	r22, 0x93	; 147
 2ae:	64 0f       	add	r22, r20
 2b0:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <lcd_4bits_set_cursor+0x3c>
 2b6:	63 ed       	ldi	r22, 0xD3	; 211
 2b8:	64 0f       	add	r22, r20
 2ba:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	08 95       	ret

000002c2 <lcd_4bit_send_char>:
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	00 97       	sbiw	r24, 0x00	; 0
 2ca:	b9 f0       	breq	.+46     	; 0x2fa <lcd_4bit_send_char+0x38>
 2cc:	16 2f       	mov	r17, r22
 2ce:	ec 01       	movw	r28, r24
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
 2d6:	61 2f       	mov	r22, r17
 2d8:	62 95       	swap	r22
 2da:	6f 70       	andi	r22, 0x0F	; 15
 2dc:	ce 01       	movw	r24, r28
 2de:	0e 94 8a 00 	call	0x114	; 0x114 <send_4bits>
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 b1 00 	call	0x162	; 0x162 <enable_signal_4bits>
 2e8:	61 2f       	mov	r22, r17
 2ea:	ce 01       	movw	r24, r28
 2ec:	0e 94 8a 00 	call	0x114	; 0x114 <send_4bits>
 2f0:	ce 01       	movw	r24, r28
 2f2:	0e 94 b1 00 	call	0x162	; 0x162 <enable_signal_4bits>
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <lcd_4bit_send_char+0x3a>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	08 95       	ret

00000304 <lcd_4bit_send_string>:
Std_ReturnType lcd_4bit_send_string(const lcd_4bits_t *lcd,uint8 *str){
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	8c 01       	movw	r16, r24
 30e:	eb 01       	movw	r28, r22
	Std_ReturnType ret = E_OK;
	uint8 counter = 0;
	if(lcd == NULL){
 310:	89 2b       	or	r24, r25
 312:	51 f0       	breq	.+20     	; 0x328 <lcd_4bit_send_string+0x24>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	04 c0       	rjmp	.+8      	; 0x320 <lcd_4bit_send_string+0x1c>
		ret = E_NOT_OK;
	}
	else{
		while(*str){
			ret = lcd_4bit_send_char(lcd,*str++);
 318:	21 96       	adiw	r28, 0x01	; 1
 31a:	c8 01       	movw	r24, r16
 31c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_4bit_send_char>
	uint8 counter = 0;
	if(lcd == NULL){
		ret = E_NOT_OK;
	}
	else{
		while(*str){
 320:	68 81       	ld	r22, Y
 322:	61 11       	cpse	r22, r1
 324:	f9 cf       	rjmp	.-14     	; 0x318 <lcd_4bit_send_string+0x14>
 326:	01 c0       	rjmp	.+2      	; 0x32a <lcd_4bit_send_string+0x26>
}
Std_ReturnType lcd_4bit_send_string(const lcd_4bits_t *lcd,uint8 *str){
	Std_ReturnType ret = E_OK;
	uint8 counter = 0;
	if(lcd == NULL){
		ret = E_NOT_OK;
 328:	80 e0       	ldi	r24, 0x00	; 0
			ret = lcd_4bit_send_char(lcd,*str++);
		}
		
	}
	return ret;
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	08 95       	ret

00000334 <lcd_4bit_send_string_pos>:
Std_ReturnType lcd_4bit_send_string_pos(const lcd_4bits_t *lcd,uint8 Row,uint8 coloumn,uint8 *str){
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if(NULL == lcd){
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	49 f0       	breq	.+18     	; 0x352 <lcd_4bit_send_string_pos+0x1e>
 340:	89 01       	movw	r16, r18
 342:	ec 01       	movw	r28, r24
		ret = E_NOT_OK;
	}
	else{
		ret = lcd_4bits_set_cursor(lcd,Row,coloumn);
 344:	0e 94 41 01 	call	0x282	; 0x282 <lcd_4bits_set_cursor>
		ret = lcd_4bit_send_string(lcd,str);
 348:	b8 01       	movw	r22, r16
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 82 01 	call	0x304	; 0x304 <lcd_4bit_send_string>
 350:	01 c0       	rjmp	.+2      	; 0x354 <lcd_4bit_send_string_pos+0x20>
	return ret;
}
Std_ReturnType lcd_4bit_send_string_pos(const lcd_4bits_t *lcd,uint8 Row,uint8 coloumn,uint8 *str){
	Std_ReturnType ret = E_OK;
	if(NULL == lcd){
		ret = E_NOT_OK;
 352:	80 e0       	ldi	r24, 0x00	; 0
	else{
		ret = lcd_4bits_set_cursor(lcd,Row,coloumn);
		ret = lcd_4bit_send_string(lcd,str);
	}
	return ret;
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <main>:
uint8 questions = 0;
uint8 right_val = 0;
uint8 left_val = 0;
int main(void)
{
	lcd_4bit_initialize(&lcd);
 35e:	8a e6       	ldi	r24, 0x6A	; 106
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_4bit_initialize>
	Button_Init(&btn_right);
 366:	85 e6       	ldi	r24, 0x65	; 101
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 49 00 	call	0x92	; 0x92 <Button_Init>
	Button_Init(&btn_left);
 36e:	80 e6       	ldi	r24, 0x60	; 96
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 49 00 	call	0x92	; 0x92 <Button_Init>
    /* Replace with your application code */
    while (1) 
    {
		if(questions == 0){
 376:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 37a:	81 11       	cpse	r24, r1
 37c:	1f c0       	rjmp	.+62     	; 0x3bc <main+0x5e>
			lcd_4bit_send_string_pos(&lcd,1,5,"The Forest");
 37e:	2c e8       	ldi	r18, 0x8C	; 140
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	45 e0       	ldi	r20, 0x05	; 5
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	8a e6       	ldi	r24, 0x6A	; 106
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
			lcd_4bit_send_string_pos(&lcd,2,1,"Welcome toThe Forest");
 38e:	22 e8       	ldi	r18, 0x82	; 130
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	8a e6       	ldi	r24, 0x6A	; 106
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
			questions++;
 39e:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a8:	2f ef       	ldi	r18, 0xFF	; 255
 3aa:	84 e3       	ldi	r24, 0x34	; 52
 3ac:	9c e0       	ldi	r25, 0x0C	; 12
 3ae:	21 50       	subi	r18, 0x01	; 1
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	90 40       	sbci	r25, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x50>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x5a>
 3b8:	00 00       	nop
 3ba:	dd cf       	rjmp	.-70     	; 0x376 <main+0x18>
			_delay_ms(4000);
    }
	else if(questions == 1){
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	09 f0       	breq	.+2      	; 0x3c2 <main+0x64>
 3c0:	4a c0       	rjmp	.+148    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	8a e6       	ldi	r24, 0x6A	; 106
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		lcd_4bit_send_string_pos(&lcd,1,1,"Imagine you're in a ");
 3cc:	27 e9       	ldi	r18, 0x97	; 151
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	8a e6       	ldi	r24, 0x6A	; 106
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"mysterious, magical");
 3dc:	2c ea       	ldi	r18, 0xAC	; 172
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	8a e6       	ldi	r24, 0x6A	; 106
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"land....");
 3ec:	20 ec       	ldi	r18, 0xC0	; 192
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	63 e0       	ldi	r22, 0x03	; 3
 3f4:	8a e6       	ldi	r24, 0x6A	; 106
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	84 e3       	ldi	r24, 0x34	; 52
 400:	9c e0       	ldi	r25, 0x0C	; 12
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
		_delay_ms(4000);
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	8a e6       	ldi	r24, 0x6A	; 106
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		lcd_4bit_send_string_pos(&lcd,1,1,"option 1 is left btn");
 418:	29 ec       	ldi	r18, 0xC9	; 201
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	8a e6       	ldi	r24, 0x6A	; 106
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"option 2is right btn");
 428:	2e ed       	ldi	r18, 0xDE	; 222
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	8a e6       	ldi	r24, 0x6A	; 106
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 438:	2f e7       	ldi	r18, 0x7F	; 127
 43a:	8a e1       	ldi	r24, 0x1A	; 26
 43c:	96 e0       	ldi	r25, 0x06	; 6
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
		_delay_ms(2000);
		questions++;
 44a:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 44e:	8f 5f       	subi	r24, 0xFF	; 255
 450:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
 454:	90 cf       	rjmp	.-224    	; 0x376 <main+0x18>
	}
	else if(questions == 2){
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	49 f5       	brne	.+82     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	8a e6       	ldi	r24, 0x6A	; 106
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		lcd_4bit_send_string_pos(&lcd,1,1,"As u enter the land,");
 464:	23 ef       	ldi	r18, 0xF3	; 243
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	8a e6       	ldi	r24, 0x6A	; 106
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"u see a forest ahead");
 474:	28 e0       	ldi	r18, 0x08	; 8
 476:	31 e0       	ldi	r19, 0x01	; 1
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	62 e0       	ldi	r22, 0x02	; 2
 47c:	8a e6       	ldi	r24, 0x6A	; 106
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 484:	2f ef       	ldi	r18, 0xFF	; 255
 486:	84 e3       	ldi	r24, 0x34	; 52
 488:	9c e0       	ldi	r25, 0x0C	; 12
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 494:	00 00       	nop
		_delay_ms(4000);
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	8a e6       	ldi	r24, 0x6A	; 106
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		questions++;
 4a0:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 4a4:	8f 5f       	subi	r24, 0xFF	; 255
 4a6:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
 4aa:	65 cf       	rjmp	.-310    	; 0x376 <main+0x18>
		
	}
	else if(questions == 3){
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4b0:	41 c0       	rjmp	.+130    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
		
		lcd_4bit_send_string_pos(&lcd,1,1,"How dothe trees look?");
 4b2:	2d e1       	ldi	r18, 0x1D	; 29
 4b4:	31 e0       	ldi	r19, 0x01	; 1
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	8a e6       	ldi	r24, 0x6A	; 106
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"1-Theyre in pattern");
 4c2:	23 e3       	ldi	r18, 0x33	; 51
 4c4:	31 e0       	ldi	r19, 0x01	; 1
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	8a e6       	ldi	r24, 0x6A	; 106
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"2-Theyre in random");
 4d2:	27 e4       	ldi	r18, 0x47	; 71
 4d4:	31 e0       	ldi	r19, 0x01	; 1
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	63 e0       	ldi	r22, 0x03	; 3
 4da:	8a e6       	ldi	r24, 0x6A	; 106
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		
		Button_Read_Value(&btn_right,&right_val);
 4e2:	65 ea       	ldi	r22, 0xA5	; 165
 4e4:	74 e0       	ldi	r23, 0x04	; 4
 4e6:	85 e6       	ldi	r24, 0x65	; 101
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 4ee:	64 ea       	ldi	r22, 0xA4	; 164
 4f0:	74 e0       	ldi	r23, 0x04	; 4
 4f2:	80 e6       	ldi	r24, 0x60	; 96
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val!= 0 || right_val !=0){
 4fa:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 4fe:	81 11       	cpse	r24, r1
 500:	05 c0       	rjmp	.+10     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 502:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 506:	88 23       	and	r24, r24
 508:	09 f4       	brne	.+2      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 50a:	35 cf       	rjmp	.-406    	; 0x376 <main+0x18>
			questions++;
 50c:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
			lcd_4bit_send_command(&lcd,CLEAR_LCD);
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	8a e6       	ldi	r24, 0x6A	; 106
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 520:	2f e7       	ldi	r18, 0x7F	; 127
 522:	88 e3       	ldi	r24, 0x38	; 56
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	21 50       	subi	r18, 0x01	; 1
 528:	80 40       	sbci	r24, 0x00	; 0
 52a:	90 40       	sbci	r25, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 530:	00 00       	nop
 532:	21 cf       	rjmp	.-446    	; 0x376 <main+0x18>
			_delay_ms(400);}
	}
	else if(questions == 4){
 534:	84 30       	cpi	r24, 0x04	; 4
 536:	09 f0       	breq	.+2      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 538:	45 c0       	rjmp	.+138    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
		left_val =0;
 53a:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 53e:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		
		lcd_4bit_send_string_pos(&lcd,1,1,"Is it day or night?");
 542:	2a e5       	ldi	r18, 0x5A	; 90
 544:	31 e0       	ldi	r19, 0x01	; 1
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	8a e6       	ldi	r24, 0x6A	; 106
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"1-day");
 552:	2e e6       	ldi	r18, 0x6E	; 110
 554:	31 e0       	ldi	r19, 0x01	; 1
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	62 e0       	ldi	r22, 0x02	; 2
 55a:	8a e6       	ldi	r24, 0x6A	; 106
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"2-night");
 562:	24 e7       	ldi	r18, 0x74	; 116
 564:	31 e0       	ldi	r19, 0x01	; 1
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	8a e6       	ldi	r24, 0x6A	; 106
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		Button_Read_Value(&btn_right,&right_val);
 572:	65 ea       	ldi	r22, 0xA5	; 165
 574:	74 e0       	ldi	r23, 0x04	; 4
 576:	85 e6       	ldi	r24, 0x65	; 101
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 57e:	64 ea       	ldi	r22, 0xA4	; 164
 580:	74 e0       	ldi	r23, 0x04	; 4
 582:	80 e6       	ldi	r24, 0x60	; 96
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val!= 0 || right_val !=0){
 58a:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 58e:	81 11       	cpse	r24, r1
 590:	05 c0       	rjmp	.+10     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 592:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 596:	88 23       	and	r24, r24
 598:	09 f4       	brne	.+2      	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 59a:	ed ce       	rjmp	.-550    	; 0x376 <main+0x18>
		questions++;
 59c:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	8a e6       	ldi	r24, 0x6A	; 106
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 5b0:	2f e7       	ldi	r18, 0x7F	; 127
 5b2:	88 e3       	ldi	r24, 0x38	; 56
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	21 50       	subi	r18, 0x01	; 1
 5b8:	80 40       	sbci	r24, 0x00	; 0
 5ba:	90 40       	sbci	r25, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 5c0:	00 00       	nop
 5c2:	d9 ce       	rjmp	.-590    	; 0x376 <main+0x18>
		_delay_ms(400);}
	}
	else if(questions == 5){
 5c4:	85 30       	cpi	r24, 0x05	; 5
 5c6:	81 f5       	brne	.+96     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
		left_val =0;
 5c8:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 5cc:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		
		lcd_4bit_send_string_pos(&lcd,1,1,"u walk deep into");
 5d0:	2c e7       	ldi	r18, 0x7C	; 124
 5d2:	31 e0       	ldi	r19, 0x01	; 1
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	8a e6       	ldi	r24, 0x6A	; 106
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"the forest,and u");
 5e0:	2d e8       	ldi	r18, 0x8D	; 141
 5e2:	31 e0       	ldi	r19, 0x01	; 1
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	62 e0       	ldi	r22, 0x02	; 2
 5e8:	8a e6       	ldi	r24, 0x6A	; 106
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"found a key");
 5f0:	2e e9       	ldi	r18, 0x9E	; 158
 5f2:	31 e0       	ldi	r19, 0x01	; 1
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	63 e0       	ldi	r22, 0x03	; 3
 5f8:	8a e6       	ldi	r24, 0x6A	; 106
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 600:	2f e7       	ldi	r18, 0x7F	; 127
 602:	8f e4       	ldi	r24, 0x4F	; 79
 604:	92 e1       	ldi	r25, 0x12	; 18
 606:	21 50       	subi	r18, 0x01	; 1
 608:	80 40       	sbci	r24, 0x00	; 0
 60a:	90 40       	sbci	r25, 0x00	; 0
 60c:	e1 f7       	brne	.-8      	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
 610:	00 00       	nop
		_delay_ms(6000);
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	8a e6       	ldi	r24, 0x6A	; 106
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		questions++;
 61c:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
 626:	a7 ce       	rjmp	.-690    	; 0x376 <main+0x18>
		
	}
	else if(questions == 6){
 628:	86 30       	cpi	r24, 0x06	; 6
 62a:	09 f0       	breq	.+2      	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 62c:	4d c0       	rjmp	.+154    	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
		left_val =0;
 62e:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 632:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_string_pos(&lcd,1,1,"What does it look");
 636:	2a ea       	ldi	r18, 0xAA	; 170
 638:	31 e0       	ldi	r19, 0x01	; 1
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	8a e6       	ldi	r24, 0x6A	; 106
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"like");
 646:	2c eb       	ldi	r18, 0xBC	; 188
 648:	31 e0       	ldi	r19, 0x01	; 1
 64a:	41 e0       	ldi	r20, 0x01	; 1
 64c:	62 e0       	ldi	r22, 0x02	; 2
 64e:	8a e6       	ldi	r24, 0x6A	; 106
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"1-Old & rusty");
 656:	21 ec       	ldi	r18, 0xC1	; 193
 658:	31 e0       	ldi	r19, 0x01	; 1
 65a:	41 e0       	ldi	r20, 0x01	; 1
 65c:	63 e0       	ldi	r22, 0x03	; 3
 65e:	8a e6       	ldi	r24, 0x6A	; 106
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,4,1,"2-Modern & new");
 666:	2f ec       	ldi	r18, 0xCF	; 207
 668:	31 e0       	ldi	r19, 0x01	; 1
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	64 e0       	ldi	r22, 0x04	; 4
 66e:	8a e6       	ldi	r24, 0x6A	; 106
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		Button_Read_Value(&btn_right,&right_val);
 676:	65 ea       	ldi	r22, 0xA5	; 165
 678:	74 e0       	ldi	r23, 0x04	; 4
 67a:	85 e6       	ldi	r24, 0x65	; 101
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 682:	64 ea       	ldi	r22, 0xA4	; 164
 684:	74 e0       	ldi	r23, 0x04	; 4
 686:	80 e6       	ldi	r24, 0x60	; 96
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val != 0 || right_val != 0){
 68e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 692:	81 11       	cpse	r24, r1
 694:	05 c0       	rjmp	.+10     	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 696:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 69a:	88 23       	and	r24, r24
 69c:	09 f4       	brne	.+2      	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 69e:	6b ce       	rjmp	.-810    	; 0x376 <main+0x18>
		questions++;
 6a0:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 6a4:	8f 5f       	subi	r24, 0xFF	; 255
 6a6:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	8a e6       	ldi	r24, 0x6A	; 106
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 6b4:	2f e7       	ldi	r18, 0x7F	; 127
 6b6:	88 e3       	ldi	r24, 0x38	; 56
 6b8:	91 e0       	ldi	r25, 0x01	; 1
 6ba:	21 50       	subi	r18, 0x01	; 1
 6bc:	80 40       	sbci	r24, 0x00	; 0
 6be:	90 40       	sbci	r25, 0x00	; 0
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
 6c4:	00 00       	nop
 6c6:	57 ce       	rjmp	.-850    	; 0x376 <main+0x18>
		_delay_ms(400);}
		
	}
	else if(questions == 7){
 6c8:	87 30       	cpi	r24, 0x07	; 7
 6ca:	09 f0       	breq	.+2      	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
 6cc:	45 c0       	rjmp	.+138    	; 0x758 <__EEPROM_REGION_LENGTH__+0x358>
		left_val =0;
 6ce:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 6d2:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_string_pos(&lcd,1,1,"What will u do?");
 6d6:	2e ed       	ldi	r18, 0xDE	; 222
 6d8:	31 e0       	ldi	r19, 0x01	; 1
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	61 e0       	ldi	r22, 0x01	; 1
 6de:	8a e6       	ldi	r24, 0x6A	; 106
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"1-Leave the key");
 6e6:	2e ee       	ldi	r18, 0xEE	; 238
 6e8:	31 e0       	ldi	r19, 0x01	; 1
 6ea:	41 e0       	ldi	r20, 0x01	; 1
 6ec:	62 e0       	ldi	r22, 0x02	; 2
 6ee:	8a e6       	ldi	r24, 0x6A	; 106
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"2-Pick up the key");
 6f6:	2e ef       	ldi	r18, 0xFE	; 254
 6f8:	31 e0       	ldi	r19, 0x01	; 1
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	63 e0       	ldi	r22, 0x03	; 3
 6fe:	8a e6       	ldi	r24, 0x6A	; 106
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		Button_Read_Value(&btn_right,&right_val);
 706:	65 ea       	ldi	r22, 0xA5	; 165
 708:	74 e0       	ldi	r23, 0x04	; 4
 70a:	85 e6       	ldi	r24, 0x65	; 101
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 712:	64 ea       	ldi	r22, 0xA4	; 164
 714:	74 e0       	ldi	r23, 0x04	; 4
 716:	80 e6       	ldi	r24, 0x60	; 96
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val != 0 || right_val != 0){
 71e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 722:	81 11       	cpse	r24, r1
 724:	05 c0       	rjmp	.+10     	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
 726:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 72a:	88 23       	and	r24, r24
 72c:	09 f4       	brne	.+2      	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
 72e:	23 ce       	rjmp	.-954    	; 0x376 <main+0x18>
			questions++;
 730:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 734:	8f 5f       	subi	r24, 0xFF	; 255
 736:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 73a:	61 e0       	ldi	r22, 0x01	; 1
 73c:	8a e6       	ldi	r24, 0x6A	; 106
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 744:	2f e7       	ldi	r18, 0x7F	; 127
 746:	88 e3       	ldi	r24, 0x38	; 56
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	21 50       	subi	r18, 0x01	; 1
 74c:	80 40       	sbci	r24, 0x00	; 0
 74e:	90 40       	sbci	r25, 0x00	; 0
 750:	e1 f7       	brne	.-8      	; 0x74a <__EEPROM_REGION_LENGTH__+0x34a>
 752:	00 c0       	rjmp	.+0      	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
 754:	00 00       	nop
 756:	0f ce       	rjmp	.-994    	; 0x376 <main+0x18>
		_delay_ms(400);}
		
	}
	else if(questions == 8){
 758:	88 30       	cpi	r24, 0x08	; 8
 75a:	e9 f5       	brne	.+122    	; 0x7d6 <__EEPROM_REGION_LENGTH__+0x3d6>
		left_val =0;
 75c:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 760:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	8a e6       	ldi	r24, 0x6A	; 106
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		lcd_4bit_send_string_pos(&lcd,1,1,"As you continue walking,");
 76e:	20 e1       	ldi	r18, 0x10	; 16
 770:	32 e0       	ldi	r19, 0x02	; 2
 772:	41 e0       	ldi	r20, 0x01	; 1
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	8a e6       	ldi	r24, 0x6A	; 106
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"you see a path leading to");
 77e:	29 e2       	ldi	r18, 0x29	; 41
 780:	32 e0       	ldi	r19, 0x02	; 2
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	62 e0       	ldi	r22, 0x02	; 2
 786:	8a e6       	ldi	r24, 0x6A	; 106
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"leading to");
 78e:	28 e3       	ldi	r18, 0x38	; 56
 790:	32 e0       	ldi	r19, 0x02	; 2
 792:	41 e0       	ldi	r20, 0x01	; 1
 794:	63 e0       	ldi	r22, 0x03	; 3
 796:	8a e6       	ldi	r24, 0x6A	; 106
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,4,1,"a mysterious door");
 79e:	23 e4       	ldi	r18, 0x43	; 67
 7a0:	32 e0       	ldi	r19, 0x02	; 2
 7a2:	41 e0       	ldi	r20, 0x01	; 1
 7a4:	64 e0       	ldi	r22, 0x04	; 4
 7a6:	8a e6       	ldi	r24, 0x6A	; 106
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 7ae:	2f eb       	ldi	r18, 0xBF	; 191
 7b0:	87 e2       	ldi	r24, 0x27	; 39
 7b2:	99 e0       	ldi	r25, 0x09	; 9
 7b4:	21 50       	subi	r18, 0x01	; 1
 7b6:	80 40       	sbci	r24, 0x00	; 0
 7b8:	90 40       	sbci	r25, 0x00	; 0
 7ba:	e1 f7       	brne	.-8      	; 0x7b4 <__EEPROM_REGION_LENGTH__+0x3b4>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <__EEPROM_REGION_LENGTH__+0x3be>
 7be:	00 00       	nop
		_delay_ms(3000);
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	8a e6       	ldi	r24, 0x6A	; 106
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		questions++;
 7ca:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 7ce:	8f 5f       	subi	r24, 0xFF	; 255
 7d0:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
 7d4:	d0 cd       	rjmp	.-1120   	; 0x376 <main+0x18>
		
	}
	else if(questions == 9){
 7d6:	89 30       	cpi	r24, 0x09	; 9
 7d8:	09 f0       	breq	.+2      	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
 7da:	45 c0       	rjmp	.+138    	; 0x866 <__stack+0x7>
		left_val =0;
 7dc:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 7e0:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_string_pos(&lcd,1,1,"Z(the) door is...");
 7e4:	25 e5       	ldi	r18, 0x55	; 85
 7e6:	32 e0       	ldi	r19, 0x02	; 2
 7e8:	41 e0       	ldi	r20, 0x01	; 1
 7ea:	61 e0       	ldi	r22, 0x01	; 1
 7ec:	8a e6       	ldi	r24, 0x6A	; 106
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"1-Grand & decorated");
 7f4:	27 e6       	ldi	r18, 0x67	; 103
 7f6:	32 e0       	ldi	r19, 0x02	; 2
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	62 e0       	ldi	r22, 0x02	; 2
 7fc:	8a e6       	ldi	r24, 0x6A	; 106
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"2-Simple & worn out");
 804:	2b e7       	ldi	r18, 0x7B	; 123
 806:	32 e0       	ldi	r19, 0x02	; 2
 808:	41 e0       	ldi	r20, 0x01	; 1
 80a:	63 e0       	ldi	r22, 0x03	; 3
 80c:	8a e6       	ldi	r24, 0x6A	; 106
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		Button_Read_Value(&btn_right,&right_val);
 814:	65 ea       	ldi	r22, 0xA5	; 165
 816:	74 e0       	ldi	r23, 0x04	; 4
 818:	85 e6       	ldi	r24, 0x65	; 101
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 820:	64 ea       	ldi	r22, 0xA4	; 164
 822:	74 e0       	ldi	r23, 0x04	; 4
 824:	80 e6       	ldi	r24, 0x60	; 96
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val != 0 || right_val != 0){
 82c:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 830:	81 11       	cpse	r24, r1
 832:	05 c0       	rjmp	.+10     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 834:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 838:	88 23       	and	r24, r24
 83a:	09 f4       	brne	.+2      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83c:	9c cd       	rjmp	.-1224   	; 0x376 <main+0x18>
			questions++;
 83e:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 842:	8f 5f       	subi	r24, 0xFF	; 255
 844:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 848:	61 e0       	ldi	r22, 0x01	; 1
 84a:	8a e6       	ldi	r24, 0x6A	; 106
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 852:	2f e7       	ldi	r18, 0x7F	; 127
 854:	88 e3       	ldi	r24, 0x38	; 56
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	21 50       	subi	r18, 0x01	; 1
 85a:	80 40       	sbci	r24, 0x00	; 0
 85c:	90 40       	sbci	r25, 0x00	; 0
 85e:	e1 f7       	brne	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
 862:	00 00       	nop
 864:	88 cd       	rjmp	.-1264   	; 0x376 <main+0x18>
		_delay_ms(400);}
		
	}
	else if(questions == 10){
 866:	8a 30       	cpi	r24, 0x0A	; 10
 868:	09 f0       	breq	.+2      	; 0x86c <__stack+0xd>
 86a:	4d c0       	rjmp	.+154    	; 0x906 <__stack+0xa7>
		left_val =0;
 86c:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 870:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_string_pos(&lcd,1,1,"u hear a scream from");
 874:	2f e8       	ldi	r18, 0x8F	; 143
 876:	32 e0       	ldi	r19, 0x02	; 2
 878:	41 e0       	ldi	r20, 0x01	; 1
 87a:	61 e0       	ldi	r22, 0x01	; 1
 87c:	8a e6       	ldi	r24, 0x6A	; 106
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"behind z door,do u");
 884:	24 ea       	ldi	r18, 0xA4	; 164
 886:	32 e0       	ldi	r19, 0x02	; 2
 888:	41 e0       	ldi	r20, 0x01	; 1
 88a:	62 e0       	ldi	r22, 0x02	; 2
 88c:	8a e6       	ldi	r24, 0x6A	; 106
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"1-Open z door");
 894:	27 eb       	ldi	r18, 0xB7	; 183
 896:	32 e0       	ldi	r19, 0x02	; 2
 898:	41 e0       	ldi	r20, 0x01	; 1
 89a:	63 e0       	ldi	r22, 0x03	; 3
 89c:	8a e6       	ldi	r24, 0x6A	; 106
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,4,1,"2-Turn back and walk away");
 8a4:	25 ec       	ldi	r18, 0xC5	; 197
 8a6:	32 e0       	ldi	r19, 0x02	; 2
 8a8:	41 e0       	ldi	r20, 0x01	; 1
 8aa:	64 e0       	ldi	r22, 0x04	; 4
 8ac:	8a e6       	ldi	r24, 0x6A	; 106
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		Button_Read_Value(&btn_right,&right_val);
 8b4:	65 ea       	ldi	r22, 0xA5	; 165
 8b6:	74 e0       	ldi	r23, 0x04	; 4
 8b8:	85 e6       	ldi	r24, 0x65	; 101
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 8c0:	64 ea       	ldi	r22, 0xA4	; 164
 8c2:	74 e0       	ldi	r23, 0x04	; 4
 8c4:	80 e6       	ldi	r24, 0x60	; 96
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val != 0 || right_val != 0){
 8cc:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 8d0:	81 11       	cpse	r24, r1
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <__stack+0x7f>
 8d4:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 8d8:	88 23       	and	r24, r24
 8da:	09 f4       	brne	.+2      	; 0x8de <__stack+0x7f>
 8dc:	4c cd       	rjmp	.-1384   	; 0x376 <main+0x18>
			questions++;
 8de:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 8e2:	8f 5f       	subi	r24, 0xFF	; 255
 8e4:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 8e8:	61 e0       	ldi	r22, 0x01	; 1
 8ea:	8a e6       	ldi	r24, 0x6A	; 106
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 8f2:	2f e7       	ldi	r18, 0x7F	; 127
 8f4:	88 e3       	ldi	r24, 0x38	; 56
 8f6:	91 e0       	ldi	r25, 0x01	; 1
 8f8:	21 50       	subi	r18, 0x01	; 1
 8fa:	80 40       	sbci	r24, 0x00	; 0
 8fc:	90 40       	sbci	r25, 0x00	; 0
 8fe:	e1 f7       	brne	.-8      	; 0x8f8 <__stack+0x99>
 900:	00 c0       	rjmp	.+0      	; 0x902 <__stack+0xa3>
 902:	00 00       	nop
 904:	38 cd       	rjmp	.-1424   	; 0x376 <main+0x18>
		_delay_ms(400);}
		
	}
	else if(questions == 11){
 906:	8b 30       	cpi	r24, 0x0B	; 11
 908:	09 f0       	breq	.+2      	; 0x90c <__stack+0xad>
 90a:	4d c0       	rjmp	.+154    	; 0x9a6 <__stack+0x147>
		left_val =0;
 90c:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 910:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_string_pos(&lcd,1,1,"Zdoor open-to reveal");
 914:	2f ed       	ldi	r18, 0xDF	; 223
 916:	32 e0       	ldi	r19, 0x02	; 2
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	61 e0       	ldi	r22, 0x01	; 1
 91c:	8a e6       	ldi	r24, 0x6A	; 106
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"abox.Whats inside?");
 924:	24 ef       	ldi	r18, 0xF4	; 244
 926:	32 e0       	ldi	r19, 0x02	; 2
 928:	41 e0       	ldi	r20, 0x01	; 1
 92a:	62 e0       	ldi	r22, 0x02	; 2
 92c:	8a e6       	ldi	r24, 0x6A	; 106
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"1An ancient artifact");
 934:	27 e0       	ldi	r18, 0x07	; 7
 936:	33 e0       	ldi	r19, 0x03	; 3
 938:	41 e0       	ldi	r20, 0x01	; 1
 93a:	63 e0       	ldi	r22, 0x03	; 3
 93c:	8a e6       	ldi	r24, 0x6A	; 106
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,4,1,"2-sparkling jewels");
 944:	2c e1       	ldi	r18, 0x1C	; 28
 946:	33 e0       	ldi	r19, 0x03	; 3
 948:	41 e0       	ldi	r20, 0x01	; 1
 94a:	64 e0       	ldi	r22, 0x04	; 4
 94c:	8a e6       	ldi	r24, 0x6A	; 106
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		Button_Read_Value(&btn_right,&right_val);
 954:	65 ea       	ldi	r22, 0xA5	; 165
 956:	74 e0       	ldi	r23, 0x04	; 4
 958:	85 e6       	ldi	r24, 0x65	; 101
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 960:	64 ea       	ldi	r22, 0xA4	; 164
 962:	74 e0       	ldi	r23, 0x04	; 4
 964:	80 e6       	ldi	r24, 0x60	; 96
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val != 0 || right_val != 0){
 96c:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 970:	81 11       	cpse	r24, r1
 972:	05 c0       	rjmp	.+10     	; 0x97e <__stack+0x11f>
 974:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 978:	88 23       	and	r24, r24
 97a:	09 f4       	brne	.+2      	; 0x97e <__stack+0x11f>
 97c:	fc cc       	rjmp	.-1544   	; 0x376 <main+0x18>
			questions++;
 97e:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 982:	8f 5f       	subi	r24, 0xFF	; 255
 984:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 988:	61 e0       	ldi	r22, 0x01	; 1
 98a:	8a e6       	ldi	r24, 0x6A	; 106
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 992:	2f e7       	ldi	r18, 0x7F	; 127
 994:	88 e3       	ldi	r24, 0x38	; 56
 996:	91 e0       	ldi	r25, 0x01	; 1
 998:	21 50       	subi	r18, 0x01	; 1
 99a:	80 40       	sbci	r24, 0x00	; 0
 99c:	90 40       	sbci	r25, 0x00	; 0
 99e:	e1 f7       	brne	.-8      	; 0x998 <__stack+0x139>
 9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <__stack+0x143>
 9a2:	00 00       	nop
 9a4:	e8 cc       	rjmp	.-1584   	; 0x376 <main+0x18>
		_delay_ms(400);}
		
	}
	else if(questions == 12){
 9a6:	8c 30       	cpi	r24, 0x0C	; 12
 9a8:	e9 f5       	brne	.+122    	; 0xa24 <__stack+0x1c5>
		left_val =0;
 9aa:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 9ae:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 9b2:	61 e0       	ldi	r22, 0x01	; 1
 9b4:	8a e6       	ldi	r24, 0x6A	; 106
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		lcd_4bit_send_string_pos(&lcd,1,1,"u suddenly feel");
 9bc:	2f e2       	ldi	r18, 0x2F	; 47
 9be:	33 e0       	ldi	r19, 0x03	; 3
 9c0:	41 e0       	ldi	r20, 0x01	; 1
 9c2:	61 e0       	ldi	r22, 0x01	; 1
 9c4:	8a e6       	ldi	r24, 0x6A	; 106
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"a cold breeze ");
 9cc:	2f e3       	ldi	r18, 0x3F	; 63
 9ce:	33 e0       	ldi	r19, 0x03	; 3
 9d0:	41 e0       	ldi	r20, 0x01	; 1
 9d2:	62 e0       	ldi	r22, 0x02	; 2
 9d4:	8a e6       	ldi	r24, 0x6A	; 106
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"& hear footsteps");
 9dc:	2e e4       	ldi	r18, 0x4E	; 78
 9de:	33 e0       	ldi	r19, 0x03	; 3
 9e0:	41 e0       	ldi	r20, 0x01	; 1
 9e2:	63 e0       	ldi	r22, 0x03	; 3
 9e4:	8a e6       	ldi	r24, 0x6A	; 106
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,4,1,"behind u");
 9ec:	2f e5       	ldi	r18, 0x5F	; 95
 9ee:	33 e0       	ldi	r19, 0x03	; 3
 9f0:	41 e0       	ldi	r20, 0x01	; 1
 9f2:	64 e0       	ldi	r22, 0x04	; 4
 9f4:	8a e6       	ldi	r24, 0x6A	; 106
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 9fc:	2f eb       	ldi	r18, 0xBF	; 191
 9fe:	87 e2       	ldi	r24, 0x27	; 39
 a00:	99 e0       	ldi	r25, 0x09	; 9
 a02:	21 50       	subi	r18, 0x01	; 1
 a04:	80 40       	sbci	r24, 0x00	; 0
 a06:	90 40       	sbci	r25, 0x00	; 0
 a08:	e1 f7       	brne	.-8      	; 0xa02 <__stack+0x1a3>
 a0a:	00 c0       	rjmp	.+0      	; 0xa0c <__stack+0x1ad>
 a0c:	00 00       	nop
		_delay_ms(3000);
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 a0e:	61 e0       	ldi	r22, 0x01	; 1
 a10:	8a e6       	ldi	r24, 0x6A	; 106
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		questions++;
 a18:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 a1c:	8f 5f       	subi	r24, 0xFF	; 255
 a1e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
 a22:	a9 cc       	rjmp	.-1710   	; 0x376 <main+0x18>
		
	}
	else if(questions == 13){
 a24:	8d 30       	cpi	r24, 0x0D	; 13
 a26:	09 f0       	breq	.+2      	; 0xa2a <__stack+0x1cb>
 a28:	4d c0       	rjmp	.+154    	; 0xac4 <__stack+0x265>
		left_val =0;
 a2a:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 a2e:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_string_pos(&lcd,1,1,"do u ..");
 a32:	28 e6       	ldi	r18, 0x68	; 104
 a34:	33 e0       	ldi	r19, 0x03	; 3
 a36:	41 e0       	ldi	r20, 0x01	; 1
 a38:	61 e0       	ldi	r22, 0x01	; 1
 a3a:	8a e6       	ldi	r24, 0x6A	; 106
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"1-Turn to see who");
 a42:	20 e7       	ldi	r18, 0x70	; 112
 a44:	33 e0       	ldi	r19, 0x03	; 3
 a46:	41 e0       	ldi	r20, 0x01	; 1
 a48:	62 e0       	ldi	r22, 0x02	; 2
 a4a:	8a e6       	ldi	r24, 0x6A	; 106
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"2-Ignore &keep");
 a52:	22 e8       	ldi	r18, 0x82	; 130
 a54:	33 e0       	ldi	r19, 0x03	; 3
 a56:	41 e0       	ldi	r20, 0x01	; 1
 a58:	63 e0       	ldi	r22, 0x03	; 3
 a5a:	8a e6       	ldi	r24, 0x6A	; 106
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,4,1,"walking");
 a62:	21 e9       	ldi	r18, 0x91	; 145
 a64:	33 e0       	ldi	r19, 0x03	; 3
 a66:	41 e0       	ldi	r20, 0x01	; 1
 a68:	64 e0       	ldi	r22, 0x04	; 4
 a6a:	8a e6       	ldi	r24, 0x6A	; 106
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		Button_Read_Value(&btn_right,&right_val);
 a72:	65 ea       	ldi	r22, 0xA5	; 165
 a74:	74 e0       	ldi	r23, 0x04	; 4
 a76:	85 e6       	ldi	r24, 0x65	; 101
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 a7e:	64 ea       	ldi	r22, 0xA4	; 164
 a80:	74 e0       	ldi	r23, 0x04	; 4
 a82:	80 e6       	ldi	r24, 0x60	; 96
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val != 0 || right_val != 0){
 a8a:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 a8e:	81 11       	cpse	r24, r1
 a90:	05 c0       	rjmp	.+10     	; 0xa9c <__stack+0x23d>
 a92:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 a96:	88 23       	and	r24, r24
 a98:	09 f4       	brne	.+2      	; 0xa9c <__stack+0x23d>
 a9a:	6d cc       	rjmp	.-1830   	; 0x376 <main+0x18>
			questions++;
 a9c:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 aa0:	8f 5f       	subi	r24, 0xFF	; 255
 aa2:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 aa6:	61 e0       	ldi	r22, 0x01	; 1
 aa8:	8a e6       	ldi	r24, 0x6A	; 106
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 ab0:	2f e7       	ldi	r18, 0x7F	; 127
 ab2:	88 e3       	ldi	r24, 0x38	; 56
 ab4:	91 e0       	ldi	r25, 0x01	; 1
 ab6:	21 50       	subi	r18, 0x01	; 1
 ab8:	80 40       	sbci	r24, 0x00	; 0
 aba:	90 40       	sbci	r25, 0x00	; 0
 abc:	e1 f7       	brne	.-8      	; 0xab6 <__stack+0x257>
 abe:	00 c0       	rjmp	.+0      	; 0xac0 <__stack+0x261>
 ac0:	00 00       	nop
 ac2:	59 cc       	rjmp	.-1870   	; 0x376 <main+0x18>
		_delay_ms(400);}
		
	}
	else if(questions == 14){
 ac4:	8e 30       	cpi	r24, 0x0E	; 14
 ac6:	e9 f5       	brne	.+122    	; 0xb42 <__stack+0x2e3>
		left_val =0;
 ac8:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 acc:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 ad0:	61 e0       	ldi	r22, 0x01	; 1
 ad2:	8a e6       	ldi	r24, 0x6A	; 106
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		lcd_4bit_send_string_pos(&lcd,1,1,"shadowy figure");/**/
 ada:	29 e9       	ldi	r18, 0x99	; 153
 adc:	33 e0       	ldi	r19, 0x03	; 3
 ade:	41 e0       	ldi	r20, 0x01	; 1
 ae0:	61 e0       	ldi	r22, 0x01	; 1
 ae2:	8a e6       	ldi	r24, 0x6A	; 106
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"appears in the ");
 aea:	28 ea       	ldi	r18, 0xA8	; 168
 aec:	33 e0       	ldi	r19, 0x03	; 3
 aee:	41 e0       	ldi	r20, 0x01	; 1
 af0:	62 e0       	ldi	r22, 0x02	; 2
 af2:	8a e6       	ldi	r24, 0x6A	; 106
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"distance");
 afa:	28 eb       	ldi	r18, 0xB8	; 184
 afc:	33 e0       	ldi	r19, 0x03	; 3
 afe:	41 e0       	ldi	r20, 0x01	; 1
 b00:	62 e0       	ldi	r22, 0x02	; 2
 b02:	8a e6       	ldi	r24, 0x6A	; 106
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,4,1,"watching you silently");
 b0a:	21 ec       	ldi	r18, 0xC1	; 193
 b0c:	33 e0       	ldi	r19, 0x03	; 3
 b0e:	41 e0       	ldi	r20, 0x01	; 1
 b10:	64 e0       	ldi	r22, 0x04	; 4
 b12:	8a e6       	ldi	r24, 0x6A	; 106
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 b1a:	2f eb       	ldi	r18, 0xBF	; 191
 b1c:	87 e2       	ldi	r24, 0x27	; 39
 b1e:	99 e0       	ldi	r25, 0x09	; 9
 b20:	21 50       	subi	r18, 0x01	; 1
 b22:	80 40       	sbci	r24, 0x00	; 0
 b24:	90 40       	sbci	r25, 0x00	; 0
 b26:	e1 f7       	brne	.-8      	; 0xb20 <__stack+0x2c1>
 b28:	00 c0       	rjmp	.+0      	; 0xb2a <__stack+0x2cb>
 b2a:	00 00       	nop
		
		_delay_ms(3000);
		lcd_4bit_send_command(&lcd,CLEAR_LCD);
 b2c:	61 e0       	ldi	r22, 0x01	; 1
 b2e:	8a e6       	ldi	r24, 0x6A	; 106
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
		questions++;
 b36:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 b3a:	8f 5f       	subi	r24, 0xFF	; 255
 b3c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
 b40:	1a cc       	rjmp	.-1996   	; 0x376 <main+0x18>
		
	}
	else if(questions == 15){
 b42:	8f 30       	cpi	r24, 0x0F	; 15
 b44:	09 f0       	breq	.+2      	; 0xb48 <__stack+0x2e9>
 b46:	4d c0       	rjmp	.+154    	; 0xbe2 <__stack+0x383>
		left_val =0;
 b48:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
		right_val =0;
 b4c:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
		lcd_4bit_send_string_pos(&lcd,1,1,"do u ..");
 b50:	28 e6       	ldi	r18, 0x68	; 104
 b52:	33 e0       	ldi	r19, 0x03	; 3
 b54:	41 e0       	ldi	r20, 0x01	; 1
 b56:	61 e0       	ldi	r22, 0x01	; 1
 b58:	8a e6       	ldi	r24, 0x6A	; 106
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,2,1,"1-Approach it");/**/
 b60:	27 ed       	ldi	r18, 0xD7	; 215
 b62:	33 e0       	ldi	r19, 0x03	; 3
 b64:	41 e0       	ldi	r20, 0x01	; 1
 b66:	62 e0       	ldi	r22, 0x02	; 2
 b68:	8a e6       	ldi	r24, 0x6A	; 106
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,3,1,"in cautiously");
 b70:	25 ee       	ldi	r18, 0xE5	; 229
 b72:	33 e0       	ldi	r19, 0x03	; 3
 b74:	41 e0       	ldi	r20, 0x01	; 1
 b76:	63 e0       	ldi	r22, 0x03	; 3
 b78:	8a e6       	ldi	r24, 0x6A	; 106
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		lcd_4bit_send_string_pos(&lcd,4,1,"2-RUN");
 b80:	23 ef       	ldi	r18, 0xF3	; 243
 b82:	33 e0       	ldi	r19, 0x03	; 3
 b84:	41 e0       	ldi	r20, 0x01	; 1
 b86:	64 e0       	ldi	r22, 0x04	; 4
 b88:	8a e6       	ldi	r24, 0x6A	; 106
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
		Button_Read_Value(&btn_right,&right_val);
 b90:	65 ea       	ldi	r22, 0xA5	; 165
 b92:	74 e0       	ldi	r23, 0x04	; 4
 b94:	85 e6       	ldi	r24, 0x65	; 101
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		Button_Read_Value(&btn_left,&left_val);
 b9c:	64 ea       	ldi	r22, 0xA4	; 164
 b9e:	74 e0       	ldi	r23, 0x04	; 4
 ba0:	80 e6       	ldi	r24, 0x60	; 96
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
		if(left_val != 0 || right_val != 0){
 ba8:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 bac:	81 11       	cpse	r24, r1
 bae:	05 c0       	rjmp	.+10     	; 0xbba <__stack+0x35b>
 bb0:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 bb4:	88 23       	and	r24, r24
 bb6:	09 f4       	brne	.+2      	; 0xbba <__stack+0x35b>
 bb8:	de cb       	rjmp	.-2116   	; 0x376 <main+0x18>
			questions++;
 bba:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 bbe:	8f 5f       	subi	r24, 0xFF	; 255
 bc0:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
 bc4:	2f e7       	ldi	r18, 0x7F	; 127
 bc6:	88 e3       	ldi	r24, 0x38	; 56
 bc8:	91 e0       	ldi	r25, 0x01	; 1
 bca:	21 50       	subi	r18, 0x01	; 1
 bcc:	80 40       	sbci	r24, 0x00	; 0
 bce:	90 40       	sbci	r25, 0x00	; 0
 bd0:	e1 f7       	brne	.-8      	; 0xbca <__stack+0x36b>
 bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <__stack+0x375>
 bd4:	00 00       	nop
		
		_delay_ms(400);
		lcd_4bit_send_command(&lcd,CLEAR_LCD);}}
 bd6:	61 e0       	ldi	r22, 0x01	; 1
 bd8:	8a e6       	ldi	r24, 0x6A	; 106
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 be0:	ca cb       	rjmp	.-2156   	; 0x376 <main+0x18>
		
		else if(questions == 16){
 be2:	80 31       	cpi	r24, 0x10	; 16
 be4:	09 f0       	breq	.+2      	; 0xbe8 <__stack+0x389>
 be6:	46 c0       	rjmp	.+140    	; 0xc74 <__stack+0x415>
			left_val =0;
 be8:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
			right_val =0;
 bec:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
			lcd_4bit_send_command(&lcd,CLEAR_LCD);
 bf0:	61 e0       	ldi	r22, 0x01	; 1
 bf2:	8a e6       	ldi	r24, 0x6A	; 106
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
			lcd_4bit_send_string_pos(&lcd,1,3,"Loading......");
 bfa:	29 ef       	ldi	r18, 0xF9	; 249
 bfc:	33 e0       	ldi	r19, 0x03	; 3
 bfe:	43 e0       	ldi	r20, 0x03	; 3
 c00:	61 e0       	ldi	r22, 0x01	; 1
 c02:	8a e6       	ldi	r24, 0x6A	; 106
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 c0a:	2f e7       	ldi	r18, 0x7F	; 127
 c0c:	8a e1       	ldi	r24, 0x1A	; 26
 c0e:	96 e0       	ldi	r25, 0x06	; 6
 c10:	21 50       	subi	r18, 0x01	; 1
 c12:	80 40       	sbci	r24, 0x00	; 0
 c14:	90 40       	sbci	r25, 0x00	; 0
 c16:	e1 f7       	brne	.-8      	; 0xc10 <__stack+0x3b1>
 c18:	00 c0       	rjmp	.+0      	; 0xc1a <__stack+0x3bb>
 c1a:	00 00       	nop
			_delay_ms(2000);
			lcd_4bit_send_string_pos(&lcd,2,5,"SHUT UP ");
 c1c:	27 e0       	ldi	r18, 0x07	; 7
 c1e:	34 e0       	ldi	r19, 0x04	; 4
 c20:	45 e0       	ldi	r20, 0x05	; 5
 c22:	62 e0       	ldi	r22, 0x02	; 2
 c24:	8a e6       	ldi	r24, 0x6A	; 106
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
			lcd_4bit_send_string_pos(&lcd,3,5,"I SAID LODAING");
 c2c:	20 e1       	ldi	r18, 0x10	; 16
 c2e:	34 e0       	ldi	r19, 0x04	; 4
 c30:	45 e0       	ldi	r20, 0x05	; 5
 c32:	63 e0       	ldi	r22, 0x03	; 3
 c34:	8a e6       	ldi	r24, 0x6A	; 106
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
			lcd_4bit_send_string_pos(&lcd,4,5,"JUST WAIT");			
 c3c:	2f e1       	ldi	r18, 0x1F	; 31
 c3e:	34 e0       	ldi	r19, 0x04	; 4
 c40:	45 e0       	ldi	r20, 0x05	; 5
 c42:	64 e0       	ldi	r22, 0x04	; 4
 c44:	8a e6       	ldi	r24, 0x6A	; 106
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 c4c:	2f eb       	ldi	r18, 0xBF	; 191
 c4e:	87 e2       	ldi	r24, 0x27	; 39
 c50:	99 e0       	ldi	r25, 0x09	; 9
 c52:	21 50       	subi	r18, 0x01	; 1
 c54:	80 40       	sbci	r24, 0x00	; 0
 c56:	90 40       	sbci	r25, 0x00	; 0
 c58:	e1 f7       	brne	.-8      	; 0xc52 <__stack+0x3f3>
 c5a:	00 c0       	rjmp	.+0      	; 0xc5c <__stack+0x3fd>
 c5c:	00 00       	nop
			_delay_ms(3000);
			lcd_4bit_send_command(&lcd,CLEAR_LCD);
 c5e:	61 e0       	ldi	r22, 0x01	; 1
 c60:	8a e6       	ldi	r24, 0x6A	; 106
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
			questions++;
 c68:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <questions>
 c6c:	8f 5f       	subi	r24, 0xFF	; 255
 c6e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <questions>
 c72:	81 cb       	rjmp	.-2302   	; 0x376 <main+0x18>
			
			
		}
		else if(questions == 17){
 c74:	81 31       	cpi	r24, 0x11	; 17
 c76:	09 f0       	breq	.+2      	; 0xc7a <__stack+0x41b>
 c78:	7e cb       	rjmp	.-2308   	; 0x376 <main+0x18>
			left_val =0;
 c7a:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <__data_end>
			right_val =0;
 c7e:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <right_val>
			lcd_4bit_send_string_pos(&lcd,1,1,"...Congratulation...");
 c82:	29 e2       	ldi	r18, 0x29	; 41
 c84:	34 e0       	ldi	r19, 0x04	; 4
 c86:	41 e0       	ldi	r20, 0x01	; 1
 c88:	61 e0       	ldi	r22, 0x01	; 1
 c8a:	8a e6       	ldi	r24, 0x6A	; 106
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
			lcd_4bit_send_string_pos(&lcd,2,4,"U are autistic");
 c92:	2e e3       	ldi	r18, 0x3E	; 62
 c94:	34 e0       	ldi	r19, 0x04	; 4
 c96:	44 e0       	ldi	r20, 0x04	; 4
 c98:	62 e0       	ldi	r22, 0x02	; 2
 c9a:	8a e6       	ldi	r24, 0x6A	; 106
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
			lcd_4bit_send_string_pos(&lcd,3,1,"1-Try again");
 ca2:	2d e4       	ldi	r18, 0x4D	; 77
 ca4:	34 e0       	ldi	r19, 0x04	; 4
 ca6:	41 e0       	ldi	r20, 0x01	; 1
 ca8:	63 e0       	ldi	r22, 0x03	; 3
 caa:	8a e6       	ldi	r24, 0x6A	; 106
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
			lcd_4bit_send_string_pos(&lcd,4,1,"2-STFU");
 cb2:	29 e5       	ldi	r18, 0x59	; 89
 cb4:	34 e0       	ldi	r19, 0x04	; 4
 cb6:	41 e0       	ldi	r20, 0x01	; 1
 cb8:	64 e0       	ldi	r22, 0x04	; 4
 cba:	8a e6       	ldi	r24, 0x6A	; 106
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
			Button_Read_Value(&btn_right,&right_val);
 cc2:	65 ea       	ldi	r22, 0xA5	; 165
 cc4:	74 e0       	ldi	r23, 0x04	; 4
 cc6:	85 e6       	ldi	r24, 0x65	; 101
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
			Button_Read_Value(&btn_left,&left_val);
 cce:	64 ea       	ldi	r22, 0xA4	; 164
 cd0:	74 e0       	ldi	r23, 0x04	; 4
 cd2:	80 e6       	ldi	r24, 0x60	; 96
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	0e 94 52 00 	call	0xa4	; 0xa4 <Button_Read_Value>
			if(left_val != 0){
 cda:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__data_end>
 cde:	88 23       	and	r24, r24
 ce0:	21 f1       	breq	.+72     	; 0xd2a <__stack+0x4cb>
				lcd_4bit_send_command(&lcd,CLEAR_LCD);
 ce2:	61 e0       	ldi	r22, 0x01	; 1
 ce4:	8a e6       	ldi	r24, 0x6A	; 106
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
				lcd_4bit_send_string_pos(&lcd,2,7,"U KIDDING ME");
 cec:	20 e6       	ldi	r18, 0x60	; 96
 cee:	34 e0       	ldi	r19, 0x04	; 4
 cf0:	47 e0       	ldi	r20, 0x07	; 7
 cf2:	62 e0       	ldi	r22, 0x02	; 2
 cf4:	8a e6       	ldi	r24, 0x6A	; 106
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
				lcd_4bit_send_string_pos(&lcd,3,10,"NO");
 cfc:	2d e6       	ldi	r18, 0x6D	; 109
 cfe:	34 e0       	ldi	r19, 0x04	; 4
 d00:	4a e0       	ldi	r20, 0x0A	; 10
 d02:	63 e0       	ldi	r22, 0x03	; 3
 d04:	8a e6       	ldi	r24, 0x6A	; 106
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 d0c:	2f e7       	ldi	r18, 0x7F	; 127
 d0e:	8a e1       	ldi	r24, 0x1A	; 26
 d10:	96 e0       	ldi	r25, 0x06	; 6
 d12:	21 50       	subi	r18, 0x01	; 1
 d14:	80 40       	sbci	r24, 0x00	; 0
 d16:	90 40       	sbci	r25, 0x00	; 0
 d18:	e1 f7       	brne	.-8      	; 0xd12 <__stack+0x4b3>
 d1a:	00 c0       	rjmp	.+0      	; 0xd1c <__stack+0x4bd>
 d1c:	00 00       	nop
				_delay_ms(2000);
				lcd_4bit_send_command(&lcd,CLEAR_LCD);
 d1e:	61 e0       	ldi	r22, 0x01	; 1
 d20:	8a e6       	ldi	r24, 0x6A	; 106
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 d28:	26 cb       	rjmp	.-2484   	; 0x376 <main+0x18>
			}
			else if(right_val != 0){
 d2a:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <right_val>
 d2e:	88 23       	and	r24, r24
 d30:	09 f4       	brne	.+2      	; 0xd34 <__stack+0x4d5>
 d32:	21 cb       	rjmp	.-2494   	; 0x376 <main+0x18>
				lcd_4bit_send_command(&lcd,CLEAR_LCD);
 d34:	61 e0       	ldi	r22, 0x01	; 1
 d36:	8a e6       	ldi	r24, 0x6A	; 106
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
				lcd_4bit_send_string_pos(&lcd,2,10,"NO");
 d3e:	2d e6       	ldi	r18, 0x6D	; 109
 d40:	34 e0       	ldi	r19, 0x04	; 4
 d42:	4a e0       	ldi	r20, 0x0A	; 10
 d44:	62 e0       	ldi	r22, 0x02	; 2
 d46:	8a e6       	ldi	r24, 0x6A	; 106
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
				lcd_4bit_send_string_pos(&lcd,3,5,"U STFU");
 d4e:	20 e7       	ldi	r18, 0x70	; 112
 d50:	34 e0       	ldi	r19, 0x04	; 4
 d52:	45 e0       	ldi	r20, 0x05	; 5
 d54:	63 e0       	ldi	r22, 0x03	; 3
 d56:	8a e6       	ldi	r24, 0x6A	; 106
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
				lcd_4bit_send_string_pos(&lcd,4,1,"Or Iam gonna kill u");
 d5e:	27 e7       	ldi	r18, 0x77	; 119
 d60:	34 e0       	ldi	r19, 0x04	; 4
 d62:	41 e0       	ldi	r20, 0x01	; 1
 d64:	64 e0       	ldi	r22, 0x04	; 4
 d66:	8a e6       	ldi	r24, 0x6A	; 106
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	0e 94 9a 01 	call	0x334	; 0x334 <lcd_4bit_send_string_pos>
 d6e:	2f e7       	ldi	r18, 0x7F	; 127
 d70:	8a e1       	ldi	r24, 0x1A	; 26
 d72:	96 e0       	ldi	r25, 0x06	; 6
 d74:	21 50       	subi	r18, 0x01	; 1
 d76:	80 40       	sbci	r24, 0x00	; 0
 d78:	90 40       	sbci	r25, 0x00	; 0
 d7a:	e1 f7       	brne	.-8      	; 0xd74 <__stack+0x515>
 d7c:	00 c0       	rjmp	.+0      	; 0xd7e <__stack+0x51f>
 d7e:	00 00       	nop
				_delay_ms(2000);
				lcd_4bit_send_command(&lcd,CLEAR_LCD);
 d80:	61 e0       	ldi	r22, 0x01	; 1
 d82:	8a e6       	ldi	r24, 0x6A	; 106
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_4bit_send_command>
 d8a:	f5 ca       	rjmp	.-2582   	; 0x376 <main+0x18>

00000d8c <gpio_pin_direction_initialize>:
    }
    else{
        TOGGLE_BIT(*port_registers[obj_pin->port],obj_pin->pin);
    }
    return ret;
}
 d8c:	00 97       	sbiw	r24, 0x00	; 0
 d8e:	d1 f1       	breq	.+116    	; 0xe04 <gpio_pin_direction_initialize+0x78>
 d90:	dc 01       	movw	r26, r24
 d92:	ec 91       	ld	r30, X
 d94:	e6 30       	cpi	r30, 0x06	; 6
 d96:	c0 f5       	brcc	.+112    	; 0xe08 <gpio_pin_direction_initialize+0x7c>
 d98:	11 96       	adiw	r26, 0x01	; 1
 d9a:	8c 91       	ld	r24, X
 d9c:	89 30       	cpi	r24, 0x09	; 9
 d9e:	b0 f5       	brcc	.+108    	; 0xe0c <gpio_pin_direction_initialize+0x80>
 da0:	66 23       	and	r22, r22
 da2:	19 f0       	breq	.+6      	; 0xdaa <gpio_pin_direction_initialize+0x1e>
 da4:	61 30       	cpi	r22, 0x01	; 1
 da6:	c1 f0       	breq	.+48     	; 0xdd8 <gpio_pin_direction_initialize+0x4c>
 da8:	33 c0       	rjmp	.+102    	; 0xe10 <gpio_pin_direction_initialize+0x84>
 daa:	f0 e0       	ldi	r31, 0x00	; 0
 dac:	ee 0f       	add	r30, r30
 dae:	ff 1f       	adc	r31, r31
 db0:	ed 56       	subi	r30, 0x6D	; 109
 db2:	fb 4f       	sbci	r31, 0xFB	; 251
 db4:	01 90       	ld	r0, Z+
 db6:	f0 81       	ld	r31, Z
 db8:	e0 2d       	mov	r30, r0
 dba:	40 81       	ld	r20, Z
 dbc:	21 e0       	ldi	r18, 0x01	; 1
 dbe:	30 e0       	ldi	r19, 0x00	; 0
 dc0:	b9 01       	movw	r22, r18
 dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <gpio_pin_direction_initialize+0x3c>
 dc4:	66 0f       	add	r22, r22
 dc6:	77 1f       	adc	r23, r23
 dc8:	8a 95       	dec	r24
 dca:	e2 f7       	brpl	.-8      	; 0xdc4 <gpio_pin_direction_initialize+0x38>
 dcc:	cb 01       	movw	r24, r22
 dce:	80 95       	com	r24
 dd0:	84 23       	and	r24, r20
 dd2:	80 83       	st	Z, r24
 dd4:	81 e0       	ldi	r24, 0x01	; 1
 dd6:	08 95       	ret
 dd8:	f0 e0       	ldi	r31, 0x00	; 0
 dda:	ee 0f       	add	r30, r30
 ddc:	ff 1f       	adc	r31, r31
 dde:	ed 56       	subi	r30, 0x6D	; 109
 de0:	fb 4f       	sbci	r31, 0xFB	; 251
 de2:	01 90       	ld	r0, Z+
 de4:	f0 81       	ld	r31, Z
 de6:	e0 2d       	mov	r30, r0
 de8:	40 81       	ld	r20, Z
 dea:	21 e0       	ldi	r18, 0x01	; 1
 dec:	30 e0       	ldi	r19, 0x00	; 0
 dee:	d9 01       	movw	r26, r18
 df0:	02 c0       	rjmp	.+4      	; 0xdf6 <gpio_pin_direction_initialize+0x6a>
 df2:	aa 0f       	add	r26, r26
 df4:	bb 1f       	adc	r27, r27
 df6:	8a 95       	dec	r24
 df8:	e2 f7       	brpl	.-8      	; 0xdf2 <gpio_pin_direction_initialize+0x66>
 dfa:	cd 01       	movw	r24, r26
 dfc:	84 2b       	or	r24, r20
 dfe:	80 83       	st	Z, r24
 e00:	81 e0       	ldi	r24, 0x01	; 1
 e02:	08 95       	ret
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	08 95       	ret
 e08:	80 e0       	ldi	r24, 0x00	; 0
 e0a:	08 95       	ret
 e0c:	80 e0       	ldi	r24, 0x00	; 0
 e0e:	08 95       	ret
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	08 95       	ret

00000e14 <gpio_pin_write_logic>:
 e14:	00 97       	sbiw	r24, 0x00	; 0
 e16:	d1 f1       	breq	.+116    	; 0xe8c <gpio_pin_write_logic+0x78>
 e18:	dc 01       	movw	r26, r24
 e1a:	ec 91       	ld	r30, X
 e1c:	e6 30       	cpi	r30, 0x06	; 6
 e1e:	c0 f5       	brcc	.+112    	; 0xe90 <gpio_pin_write_logic+0x7c>
 e20:	11 96       	adiw	r26, 0x01	; 1
 e22:	8c 91       	ld	r24, X
 e24:	89 30       	cpi	r24, 0x09	; 9
 e26:	b0 f5       	brcc	.+108    	; 0xe94 <gpio_pin_write_logic+0x80>
 e28:	66 23       	and	r22, r22
 e2a:	19 f0       	breq	.+6      	; 0xe32 <gpio_pin_write_logic+0x1e>
 e2c:	61 30       	cpi	r22, 0x01	; 1
 e2e:	c1 f0       	breq	.+48     	; 0xe60 <gpio_pin_write_logic+0x4c>
 e30:	33 c0       	rjmp	.+102    	; 0xe98 <gpio_pin_write_logic+0x84>
 e32:	f0 e0       	ldi	r31, 0x00	; 0
 e34:	ee 0f       	add	r30, r30
 e36:	ff 1f       	adc	r31, r31
 e38:	e5 56       	subi	r30, 0x65	; 101
 e3a:	fb 4f       	sbci	r31, 0xFB	; 251
 e3c:	01 90       	ld	r0, Z+
 e3e:	f0 81       	ld	r31, Z
 e40:	e0 2d       	mov	r30, r0
 e42:	40 81       	ld	r20, Z
 e44:	21 e0       	ldi	r18, 0x01	; 1
 e46:	30 e0       	ldi	r19, 0x00	; 0
 e48:	b9 01       	movw	r22, r18
 e4a:	02 c0       	rjmp	.+4      	; 0xe50 <gpio_pin_write_logic+0x3c>
 e4c:	66 0f       	add	r22, r22
 e4e:	77 1f       	adc	r23, r23
 e50:	8a 95       	dec	r24
 e52:	e2 f7       	brpl	.-8      	; 0xe4c <gpio_pin_write_logic+0x38>
 e54:	cb 01       	movw	r24, r22
 e56:	80 95       	com	r24
 e58:	84 23       	and	r24, r20
 e5a:	80 83       	st	Z, r24
 e5c:	81 e0       	ldi	r24, 0x01	; 1
 e5e:	08 95       	ret
 e60:	f0 e0       	ldi	r31, 0x00	; 0
 e62:	ee 0f       	add	r30, r30
 e64:	ff 1f       	adc	r31, r31
 e66:	e5 56       	subi	r30, 0x65	; 101
 e68:	fb 4f       	sbci	r31, 0xFB	; 251
 e6a:	01 90       	ld	r0, Z+
 e6c:	f0 81       	ld	r31, Z
 e6e:	e0 2d       	mov	r30, r0
 e70:	40 81       	ld	r20, Z
 e72:	21 e0       	ldi	r18, 0x01	; 1
 e74:	30 e0       	ldi	r19, 0x00	; 0
 e76:	d9 01       	movw	r26, r18
 e78:	02 c0       	rjmp	.+4      	; 0xe7e <gpio_pin_write_logic+0x6a>
 e7a:	aa 0f       	add	r26, r26
 e7c:	bb 1f       	adc	r27, r27
 e7e:	8a 95       	dec	r24
 e80:	e2 f7       	brpl	.-8      	; 0xe7a <gpio_pin_write_logic+0x66>
 e82:	cd 01       	movw	r24, r26
 e84:	84 2b       	or	r24, r20
 e86:	80 83       	st	Z, r24
 e88:	81 e0       	ldi	r24, 0x01	; 1
 e8a:	08 95       	ret
 e8c:	80 e0       	ldi	r24, 0x00	; 0
 e8e:	08 95       	ret
 e90:	80 e0       	ldi	r24, 0x00	; 0
 e92:	08 95       	ret
 e94:	80 e0       	ldi	r24, 0x00	; 0
 e96:	08 95       	ret
 e98:	80 e0       	ldi	r24, 0x00	; 0
 e9a:	08 95       	ret

00000e9c <gpio_pin_read_logic>:
 e9c:	00 97       	sbiw	r24, 0x00	; 0
 e9e:	e1 f0       	breq	.+56     	; 0xed8 <gpio_pin_read_logic+0x3c>
 ea0:	dc 01       	movw	r26, r24
 ea2:	ec 91       	ld	r30, X
 ea4:	e6 30       	cpi	r30, 0x06	; 6
 ea6:	d0 f4       	brcc	.+52     	; 0xedc <gpio_pin_read_logic+0x40>
 ea8:	11 96       	adiw	r26, 0x01	; 1
 eaa:	2c 91       	ld	r18, X
 eac:	29 30       	cpi	r18, 0x09	; 9
 eae:	c0 f4       	brcc	.+48     	; 0xee0 <gpio_pin_read_logic+0x44>
 eb0:	f0 e0       	ldi	r31, 0x00	; 0
 eb2:	ee 0f       	add	r30, r30
 eb4:	ff 1f       	adc	r31, r31
 eb6:	e5 57       	subi	r30, 0x75	; 117
 eb8:	fb 4f       	sbci	r31, 0xFB	; 251
 eba:	01 90       	ld	r0, Z+
 ebc:	f0 81       	ld	r31, Z
 ebe:	e0 2d       	mov	r30, r0
 ec0:	80 81       	ld	r24, Z
 ec2:	90 e0       	ldi	r25, 0x00	; 0
 ec4:	02 c0       	rjmp	.+4      	; 0xeca <gpio_pin_read_logic+0x2e>
 ec6:	95 95       	asr	r25
 ec8:	87 95       	ror	r24
 eca:	2a 95       	dec	r18
 ecc:	e2 f7       	brpl	.-8      	; 0xec6 <gpio_pin_read_logic+0x2a>
 ece:	81 70       	andi	r24, 0x01	; 1
 ed0:	fb 01       	movw	r30, r22
 ed2:	80 83       	st	Z, r24
 ed4:	81 e0       	ldi	r24, 0x01	; 1
 ed6:	08 95       	ret
 ed8:	80 e0       	ldi	r24, 0x00	; 0
 eda:	08 95       	ret
 edc:	80 e0       	ldi	r24, 0x00	; 0
 ede:	08 95       	ret
 ee0:	80 e0       	ldi	r24, 0x00	; 0
 ee2:	08 95       	ret

00000ee4 <gpio_pin_initialize>:
Std_ReturnType gpio_pin_initialize(const pin_config_t *obj_pin){
 ee4:	cf 93       	push	r28
 ee6:	df 93       	push	r29
    Std_ReturnType ret = E_OK;
    if(obj_pin == NULL || obj_pin->port > MAX_PORTS || obj_pin->pin > MAX_PIN){
 ee8:	00 97       	sbiw	r24, 0x00	; 0
 eea:	89 f0       	breq	.+34     	; 0xf0e <gpio_pin_initialize+0x2a>
 eec:	fc 01       	movw	r30, r24
 eee:	20 81       	ld	r18, Z
 ef0:	26 30       	cpi	r18, 0x06	; 6
 ef2:	78 f4       	brcc	.+30     	; 0xf12 <gpio_pin_initialize+0x2e>
 ef4:	21 81       	ldd	r18, Z+1	; 0x01
 ef6:	29 30       	cpi	r18, 0x09	; 9
 ef8:	70 f4       	brcc	.+28     	; 0xf16 <gpio_pin_initialize+0x32>
 efa:	ec 01       	movw	r28, r24
        ret = E_NOT_OK;
    }
    else{
        gpio_pin_direction_initialize(obj_pin,obj_pin->direction);
 efc:	62 81       	ldd	r22, Z+2	; 0x02
 efe:	0e 94 c6 06 	call	0xd8c	; 0xd8c <gpio_pin_direction_initialize>
        gpio_pin_write_logic(obj_pin,obj_pin->logic);
 f02:	6b 81       	ldd	r22, Y+3	; 0x03
 f04:	ce 01       	movw	r24, r28
 f06:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_pin_write_logic>
        TOGGLE_BIT(*port_registers[obj_pin->port],obj_pin->pin);
    }
    return ret;
}
Std_ReturnType gpio_pin_initialize(const pin_config_t *obj_pin){
    Std_ReturnType ret = E_OK;
 f0a:	81 e0       	ldi	r24, 0x01	; 1
 f0c:	05 c0       	rjmp	.+10     	; 0xf18 <gpio_pin_initialize+0x34>
    if(obj_pin == NULL || obj_pin->port > MAX_PORTS || obj_pin->pin > MAX_PIN){
        ret = E_NOT_OK;
 f0e:	80 e0       	ldi	r24, 0x00	; 0
 f10:	03 c0       	rjmp	.+6      	; 0xf18 <gpio_pin_initialize+0x34>
 f12:	80 e0       	ldi	r24, 0x00	; 0
 f14:	01 c0       	rjmp	.+2      	; 0xf18 <gpio_pin_initialize+0x34>
 f16:	80 e0       	ldi	r24, 0x00	; 0
    else{
        gpio_pin_direction_initialize(obj_pin,obj_pin->direction);
        gpio_pin_write_logic(obj_pin,obj_pin->logic);
    }
    return ret;
}
 f18:	df 91       	pop	r29
 f1a:	cf 91       	pop	r28
 f1c:	08 95       	ret

00000f1e <_exit>:
 f1e:	f8 94       	cli

00000f20 <__stop_program>:
 f20:	ff cf       	rjmp	.-2      	; 0xf20 <__stop_program>
